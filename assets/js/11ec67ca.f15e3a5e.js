"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[48959],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||s[m]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={title:"Initialization",date:"2020-02-26",sidebar_position:20},o=void 0,l={unversionedId:"collecting-data/collecting-from-own-applications/golang-tracker/initialization/index",id:"collecting-data/collecting-from-own-applications/golang-tracker/initialization/index",title:"Initialization",description:"Import the library",source:"@site/docs/collecting-data/collecting-from-own-applications/golang-tracker/initialization/index.md",sourceDirName:"collecting-data/collecting-from-own-applications/golang-tracker/initialization",slug:"/collecting-data/collecting-from-own-applications/golang-tracker/initialization/",permalink:"/docs/collecting-data/collecting-from-own-applications/golang-tracker/initialization/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/collecting-data/collecting-from-own-applications/golang-tracker/initialization/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:20,frontMatter:{title:"Initialization",date:"2020-02-26",sidebar_position:20},sidebar:"defaultSidebar",previous:{title:"Setup",permalink:"/docs/collecting-data/collecting-from-own-applications/golang-tracker/setup/"},next:{title:"Tracking the Subject",permalink:"/docs/collecting-data/collecting-from-own-applications/golang-tracker/adding-extra-data-the-subject-class/"}},p={},c=[{value:"Import the library",id:"import-the-library",level:3},{value:"Creating a tracker",id:"creating-a-tracker",level:3},{value:"<code>RequireEmitter</code>",id:"requireemitter",level:4},{value:"<code>OptionSubject</code>",id:"optionsubject",level:4},{value:"<code>OptionNamespace</code>",id:"optionnamespace",level:4},{value:"<code>OptionAppId</code>",id:"optionappid",level:4},{value:"<code>OptionPlatform</code>",id:"optionplatform",level:4},{value:"<code>OptionBase64Encode</code>",id:"optionbase64encode",level:4}],d={toc:c};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"import-the-library"},"Import the library"),(0,r.kt)("p",null,"Import the Golang Tracker library like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "gopkg.in/snowplow/snowplow-golang-tracker.v2/tracker"\n\nOR\n\nimport "github.com/snowplow/snowplow-golang-tracker/v2/tracker" # When using modules\n')),(0,r.kt)("p",null,"You will need to refer to the package as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"tracker"),". If you wish to use something shorter (or if\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"tracker"),"\xa0is already taken):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import sp "gopkg.in/snowplow/snowplow-golang-tracker.v2/tracker"\n\nOR\n\nimport sp "github.com/snowplow/snowplow-golang-tracker/v2/tracker" # When using modules\n')),(0,r.kt)("p",null,"The package can now be referred to as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"sp"),"\xa0rather than\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"tracker"),"."),(0,r.kt)("p",null,"That's it - you are now ready to initialize a tracker instance."),(0,r.kt)("h3",{id:"creating-a-tracker"},"Creating a tracker"),(0,r.kt)("p",null,"The simplest tracker initialization only requires you to provide the URI of the collector to which the tracker will log events:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import sp "github.com/snowplow/snowplow-golang-tracker/v2/tracker"\n\nemitter := sp.InitEmitter(sp.RequireCollectorUri("com.acme"))\ntracker := sp.InitTracker(sp.RequireEmitter(emitter))\n')),(0,r.kt)("p",null,"There are other optional builder functions:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Function Name")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Default")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RequireEmitter")),(0,r.kt)("td",{parentName:"tr",align:null},"The emitter to which events are sent"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nil"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OptionSubject")),(0,r.kt)("td",{parentName:"tr",align:null},"The user being tracked"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nil"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OptionNamespace")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the tracker instance"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"`","`")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OptionAppId")),(0,r.kt)("td",{parentName:"tr",align:null},"The application ID"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"`","`")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OptionPlatform")),(0,r.kt)("td",{parentName:"tr",align:null},"The platform the Tracker is running on"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"srv"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OptionBase64Encode")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to enable\xa0",(0,r.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Base64"},"base 64 encoding")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))))),(0,r.kt)("p",null,"A more complete example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'subject := sp.InitSubject()\nemitter := sp.InitEmitter(sp.RequireCollectorUri("com.acme"))\ntracker := sp.InitTracker(\n  sp.RequireEmitter(emitter),\n  sp.OptionSubject(subject),\n  sp.OptionNamespace("namespace"),\n  sp.OptionAppId("app-id"),\n  sp.OptionPlatform("mob"),\n  sp.OptionBase64Encode(false),\n)\n')),(0,r.kt)("h4",{id:"requireemitter"},(0,r.kt)("inlineCode",{parentName:"h4"},"RequireEmitter")),(0,r.kt)("p",null,"Accepts an argument of an Emitter instance pointer; if the object is\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),"\xa0will\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"panic"),". See\xa0Emitters\xa0for more on emitter configuration."),(0,r.kt)("h4",{id:"optionsubject"},(0,r.kt)("inlineCode",{parentName:"h4"},"OptionSubject")),(0,r.kt)("p",null,"The user which the Tracker will track. Accepts an argument of a\xa0Subject\xa0instance pointer."),(0,r.kt)("p",null,"You don't need to set this during Tracker construction; you can use the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"tracker.SetSubject()"),"\xa0method afterwards. In fact, you don't need to create a subject at all. If you don't, though, your events won't contain user-specific data such as timezone and language."),(0,r.kt)("h4",{id:"optionnamespace"},(0,r.kt)("inlineCode",{parentName:"h4"},"OptionNamespace")),(0,r.kt)("p",null,"If provided, the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),"\xa0argument will be attached to every event fired by the new tracker. This allows you to later identify which tracker fired which event if you have multiple trackers running."),(0,r.kt)("h4",{id:"optionappid"},(0,r.kt)("inlineCode",{parentName:"h4"},"OptionAppId")),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"appId"),"\xa0argument lets you set the application ID to any string."),(0,r.kt)("h4",{id:"optionplatform"},(0,r.kt)("inlineCode",{parentName:"h4"},"OptionPlatform")),(0,r.kt)("p",null,"By default we assume the Tracker will be running in a server environment. To override this provide your own platform string."),(0,r.kt)("h4",{id:"optionbase64encode"},(0,r.kt)("inlineCode",{parentName:"h4"},"OptionBase64Encode")),(0,r.kt)("p",null,"By default, unstructured events and custom contexts are encoded into Base64 to ensure that no data is lost or corrupted. You can turn encoding on or off using the Boolean\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"OptionBase64Encode"),"\xa0function with either\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"\xa0or\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"\xa0passed in."))}s.isMDXComponent=!0}}]);