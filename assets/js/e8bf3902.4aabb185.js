"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[86578],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(86010);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),i=n(67294),o=n(86010),r=n(72389),s=n(67392),l=n(7094),c=n(12466);const p="tabList__CuJ",d="tabItem_LNqP";function u(e){var t,n;const{lazy:r,block:u,defaultValue:m,values:h,groupId:k,className:g}=e,v=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=h?h:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,s.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==w&&!f.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:N}=(0,l.U)(),[C,S]=(0,i.useState)(w),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=k){const e=y[k];null!=e&&e!==C&&f.some((t=>t.value===e))&&S(e)}const D=e=>{const t=e.currentTarget,n=x.indexOf(t),a=f[n].value;a!==C&&(T(t),S(a),null!=k&&N(k,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=x.indexOf(e.currentTarget)+1;n=null!=(a=x[t])?a:x[0];break}case"ArrowLeft":{var i;const t=x.indexOf(e.currentTarget)-1;n=null!=(i=x[t])?i:x[x.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},g)},f.map((e=>{let{value:t,label:n,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>x.push(e),onKeyDown:I,onFocus:D,onClick:D},r,{className:(0,o.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),r?(0,i.cloneElement)(v.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,r.Z)();return i.createElement(u,(0,a.Z)({key:String(t)},e))}},39494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(87462),i=(n(67294),n(3905)),o=n(65488),r=n(85162);const s={title:"Tracking Events",date:"2021-11-23",sidebar_position:30},l=void 0,c={unversionedId:"collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events/index",id:"collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events/index",title:"Tracking Events",description:"The mobile trackers capture two types of events, automatically captured and manual events.",source:"@site/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events/index.md",sourceDirName:"collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events",slug:"/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events/",permalink:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/tracking-events/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:30,frontMatter:{title:"Tracking Events",date:"2021-11-23",sidebar_position:30},sidebar:"defaultSidebar",previous:{title:"Quick Start Guide",permalink:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/quick-start-guide/"},next:{title:"Remote Configuration",permalink:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/remote-configuration/"}},p={},d=[{value:"Session Context",id:"session-context",level:2},{value:"Session callback",id:"session-callback",level:3},{value:"Custom Event Context",id:"custom-event-context",level:2},{value:"Tracking events with Custom Context",id:"tracking-events-with-custom-context",level:2},{value:"Self Describing",id:"self-describing",level:2},{value:"Structured",id:"structured",level:2},{value:"Timing",id:"timing",level:2},{value:"Screen View",id:"screen-view",level:2},{value:"Consent",id:"consent",level:2},{value:"Consent Granted",id:"consent-granted",level:3},{value:"Consent Withdrawn",id:"consent-withdrawn",level:3},{value:"Ecommerce Transaction",id:"ecommerce-transaction",level:2},{value:"Push and Local Notification",id:"push-and-local-notification",level:2},{value:"Deep Link",id:"deep-link",level:2},{value:"Session Context",id:"session-context-1",level:2},{value:"Session callback",id:"session-callback-1",level:3},{value:"Custom Event Context",id:"custom-event-context-1",level:2},{value:"Tracking events with Custom Context",id:"tracking-events-with-custom-context-1",level:2},{value:"Self Describing",id:"self-describing-1",level:2},{value:"Structured",id:"structured-1",level:2},{value:"Timing",id:"timing-1",level:2},{value:"Screen View",id:"screen-view-1",level:2},{value:"Consent",id:"consent-1",level:2},{value:"Consent Granted",id:"consent-granted-1",level:3},{value:"Consent Withdrawn",id:"consent-withdrawn-1",level:3},{value:"Ecommerce Transaction",id:"ecommerce-transaction-1",level:2},{value:"Push and Local Notification",id:"push-and-local-notification-1",level:2},{value:"Deep Link",id:"deep-link-1",level:2}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"ios",label:"iOS Tracker",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"The mobile trackers capture two types of events, automatically captured and manual events."),(0,i.kt)("h1",{id:"auto-tracking"},"Auto Tracking"),(0,i.kt)("p",null,"Automatically captured events in the iOS Tracker are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"App Lifecycle Tracking"),": Captures application foreground and application background events."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Screen View Tracking"),": Captures each time a new \u201cscreen\u201d is loaded."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Exception Tracking"),": Captures any unhandled exceptions within the application."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Installation Tracking"),": Captures an install event which occurs the first time an application is opened.")),(0,i.kt)("p",null,"These are enabled in the tracker configuration. In this example, some helpful automatic contexts and all Autotracking is enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let trackerConfig = TrackerConfiguration()\n    .sessionContext(true)\n    .platformContext(true)\n    .screenContext(true)\n    .applicationContext(true)\n    .lifecycleAutotracking(true)\n    .screenViewAutotracking(true)\n    .exceptionAutotracking(true)\n    .installAutotracking(true)\n")),(0,i.kt)("h2",{id:"session-context"},"Session Context"),(0,i.kt)("p",null,"Client session tracking is activated by default but it can be disabled through the TrackerConfiguration as explained above. When enabled the tracker appends a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snowplow/iglu-central/blob/master/schemas/com.snowplowanalytics.snowplow/client_session/jsonschema/1-0-2"},"client","_","session")," context to each event it sends and it maintains this session information as long as the application is installed on the device."),(0,i.kt)("p",null,"Sessions correspond to tracked user activity. A session expires when no tracking events have occurred for the amount of time defined in a timeout (by default 30 minutes). The session timeout check is executed for each event tracked. If the gap between two consecutive events is longer than the timeout the session is renewed. There are two timeouts since a session can timeout in the foreground (while the app is visible) or in the background (when the app has been suspended, but not closed)."),(0,i.kt)("p",null,"The lifecycle events (",(0,i.kt)("inlineCode",{parentName:"p"},"application_foreground")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"application_background")," events) have a role in the session expiration. The lifecycle events can be enabled in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/introduction/#TrackerConfiguration"},"TrackerConfiguration")," enabling ",(0,i.kt)("inlineCode",{parentName:"p"},"lifecycleAutotracking")," (Note: on Android it requires ",(0,i.kt)("inlineCode",{parentName:"p"},"androidx.lifecycle:lifecycle-extensions"),"). Once enabled they will be fired automatically when the app moves from foreground state to background state and vice versa."),(0,i.kt)("p",null,"When the app moves from foreground to background the ",(0,i.kt)("inlineCode",{parentName:"p"},"application_background")," event is fired. If session tracking is enabled, the session context will be attached to the event checking the session expiration using the foreground timeout. When the app moves from background to foreground the ",(0,i.kt)("inlineCode",{parentName:"p"},"application_foreground")," event is fired. If session tracking is enabled, the session context will be attached to the event checking the session expiration using the background timeout."),(0,i.kt)("p",null,"For instance, with this configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SessionConfiguration(\n    TimeMeasure(360L, TimeUnit.SECONDS),\n    TimeMeasure(15L, TimeUnit.SECONDS)\n)\n")),(0,i.kt)("p",null,"the session would expire if the app is backgrounded for more than 15 seconds, like in this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"time: 0s - screen_view event - foreground timeout session check - session 1\ntime: 3s - application_background event - foreground timeout session check (3  15) - session 2\ntime: 30s - application_foreground event - background timeout session check (30 > 15) - session 2\n")),(0,i.kt)("p",null,"In the above example the ",(0,i.kt)("inlineCode",{parentName:"p"},"application_foreground")," event triggers a new session because the time spent on background (without tracked events) is bigger than the background timeout for the session."),(0,i.kt)("h3",{id:"session-callback"},"Session callback"),(0,i.kt)("p",null,"(Available from v3.1)"),(0,i.kt)("p",null,"The tracker allows the configuration of a callback to inform the app everytime a new session is created (in correspondence of a session timeout check). This can be configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionConfiguration")," and it provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionState")," where can be accessed all the info already tracked in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionContext"),"."),(0,i.kt)("p",null,"Below an example of where the session callback is used to print out the values of session every time a new session is generated by the tracker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'...\nlet sessionConfig = SessionConfiguration()\n    .onSessionStateUpdate { session in\n        print("SessionState: id: \\(session.sessionId) - index: \\(session.sessionIndex) - userID: \\(session.userId) - firstEventID: \\(session.firstEventId)")\n    }\n...\nlet tracker = Snowplow.createTracker(namespace: kNamespace, network: networkConfig, configurations: [sessionConfig])\n')),(0,i.kt)("h2",{id:"custom-event-context"},"Custom Event Context"),(0,i.kt)("p",null,"Custom context can be used to augment any standard Snowplow event type, including self describing events, with additional data. We refer to this custom context as ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-events-entities/"},"Event Entities"),"."),(0,i.kt)("p",null,"Each custom context is an array of self-describing JSON following the same pattern as a self describing event. As with self describing events, if you want to create your own custom context, you must create a ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-schemas-and-validation/"},"JSON schema")," for it and upload it to an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snowplow/iglu"},"Iglu repository")," using the ",(0,i.kt)("a",{parentName:"p",href:"https://snowplow.io/snowplow-insights/"},"Snowplow BDP Console UI"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/managing-data-structures/"},"Data Structures API"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/pipeline-components-and-applications/iglu/"},"igluctl")," or one of the other supported Iglu clients."),(0,i.kt)("p",null,"Note: Even if only one custom context is being attached to an event, it still needs to be wrapped in an array."),(0,i.kt)("p",null,"Here are two example custom context JSONs. One describes a screen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    schema: 'iglu:com.example/screen/jsonschema/1-2-1',\n    data: {\n        screenType: 'test',\n        lastUpdated: '2021-06-11'\n    }\n}\n")),(0,i.kt)("p",null,"and the other describes a user on that screen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    schema: 'iglu:com.example/user/jsonschema/2-0-0',\n    data: {\n      userType: 'tester'\n    }\n}\n")),(0,i.kt)("h2",{id:"tracking-events-with-custom-context"},"Tracking events with Custom Context"),(0,i.kt)("p",null,"How to track a screen view with both of these contexts attached:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = ScreenView(name: "DemoScreenName", screenId: UUID())\nevent.contexts.add(\n    SelfDescribingJson(schema: "iglu:com.example/screen/jsonschema/1-2-1",\n        andDictionary: [\n             "screenType": "test",\n             "lastUpdated": "2021-06-11"\n        ])!)     \nevent.contexts.add(\n    SelfDescribingJson(schema: "iglu:com.example/user/jsonschema/2-0-0", \n        andDictionary: [\n             "userType": "tester"\n        ])!)\ntracker.track(event)\n')),(0,i.kt)("p",null,"It is also possible to add contexts in a declarative way (see GlobalContextsConfiguration ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/introduction/"},"here"),"), so that they are applied to all (or a subset of) events within an application."),(0,i.kt)("h1",{id:"manual-tracking"},"Manual Tracking"),(0,i.kt)("h2",{id:"self-describing"},"Self Describing"),(0,i.kt)("p",null,"You may wish to track events in your app which are not directly supported by Snowplow and which structured event tracking does not adequately capture. Your event may have more than the five fields offered by Structured events, or its fields may not fit into the category-action-label-property-value model. The solution is Snowplow\u2019s self-describing events. Self-describing events are a ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-schemas-and-validation/"},"data structure based on JSON Schemas")," and can have arbitrarily many fields."),(0,i.kt)("p",null,"To define your own custom event, you must create a ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-schemas-and-validation/"},"JSON schema")," for that event and upload it to an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snowplow/iglu"},"Iglu Schema Repository")," using ",(0,i.kt)("a",{parentName:"p",href:"/docs/pipeline-components-and-applications/iglu/"},"igluctl")," (or if a Snowplow BDP customer, you can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/managing-data-structures/"},"Snowplow BDP Console UI")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/managing-data-structures-via-the-api-2/"},"Data Structures API"),"). Snowplow uses the schema to validate that the JSON containing the event properties is well-formed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let data = ["targetUrl": "http://a-target-url.com" as NSObject];       \nlet event = SelfDescribing(schema: "iglu:com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1", payload: data)       \ntracker.track(event)\n')),(0,i.kt)("p",null,"A Self Describing event is a ",(0,i.kt)("a",{parentName:"p",href:"http://snowplowanalytics.com/blog/2014/05/15/introducing-self-describing-jsons/"},"self-describing JSON"),". It has two fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," field, containing the properties of the event"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"schema")," field, containing the location of the JSON schema against which the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," field should be validated.")),(0,i.kt)("h2",{id:"structured"},"Structured"),(0,i.kt)("p",null,"Our philosophy in creating Snowplow is that users should capture important consumer interactions and design suitable data structures for this data capture. You can read more about that philosophy ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/"},"here"),". Using ",(0,i.kt)("inlineCode",{parentName:"p"},"trackSelfDescribingEvent")," captures these interactions with custom schemas, as desribed above."),(0,i.kt)("p",null,"However, as part of a Snowplow implementation there may be interactons where custom Self Describing events are perhaps too complex or unwarranted. They are then candidates to track using ",(0,i.kt)("inlineCode",{parentName:"p"},"Structured"),", if none of the other event-specific methods outlined below are appropriate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = Structured(category: "Example", action: "my-action")\n    .label("my-label")\n    .property("my-property")\n    .value(5)\ntracker.track(event)\n')),(0,i.kt)("h2",{id:"timing"},"Timing"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Timing")," events to track user timing events such as how long resources take to load."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = Timing(category: "timing-category", variable: "timing-variable", timing: 5)\n    .label("optional-label")       \ntracker.track(event)\n')),(0,i.kt)("h2",{id:"screen-view"},"Screen View"),(0,i.kt)("p",null,"Track the user viewing a screen within the application. This type of tracking is typically used when automatic screen view tracking is not suitable within your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = ScreenView(name: "DemoScreenName", screenId: UUID())\ntracker.track(event)\n')),(0,i.kt)("h2",{id:"consent"},"Consent"),(0,i.kt)("h3",{id:"consent-granted"},"Consent Granted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsentGranted")," event to track a user opting into data collection. A consent document context will be attached to the event using the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," arguments supplied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = ConsentGranted(expiry: "2022-01-01T00:00:00Z", documentId: "1234abcd", version: "1.2")       \n    .name("document-name")\n    .documentDescription("document-description")\n                \ntracker.track(event)\n')),(0,i.kt)("h3",{id:"consent-withdrawn"},"Consent Withdrawn"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsentWithdrawn")," event to track a user withdrawing consent for data collection. A consent document context will be attached to the event using the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," arguments supplied. To specify that a user opts out of all data collection, ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," should be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = ConsentWithdrawn()\n    .all(true)\n    .documentId("1234abcd")\n    .version("1.2")       \n    .name("document-name")\n    .documentDescription("document-description")\n                \ntracker.track(event)\n')),(0,i.kt)("h2",{id:"ecommerce-transaction"},"Ecommerce Transaction"),(0,i.kt)("p",null,"Modelled on Google Analytics ecommerce tracking capability, Snowplow uses three steps that can be used together to track online transactions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Create a Ecommerce event.")," Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Ecommerce")," to initialize a transaction object. This will be the object that is loaded with all the data relevant to the specific transaction that is being tracked including all the items in the order, the prices of the items, the price of shipping and the ",(0,i.kt)("inlineCode",{parentName:"li"},"order_id"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Add items to the transaction.")," Create an array of ",(0,i.kt)("inlineCode",{parentName:"li"},"EcommerceItem")," to pass to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Ecommerce")," object."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Submit the transaction to Snowplow")," using the ",(0,i.kt)("inlineCode",{parentName:"li"},"track()")," method, once all the relevant data has been loaded into the object.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let transactionID = "6a8078be"       \n                \nlet itemArray = [       \n  EcommerceItem(sku: "DemoItemSku", price: 0.75, quantity: 1)\n    .name("DemoItemName")       \n    .category("DemoItemCategory")       \n    .currency("USD")       \n]       \n                \nlet event = Ecommerce(orderId: transactionID, totalValue: 350, items: itemArray)   \n    .affiliation("DemoTransactionAffiliation")\n    .taxValue(10)\n    .shipping(15)\n    .city("Boston")\n    .state("Massachisetts")\n    .country("USA")\n    .currency("USD")\ntracker.track(event)\n')),(0,i.kt)("h2",{id:"push-and-local-notification"},"Push and Local Notification"),(0,i.kt)("p",null,"To track an event when a push (or local) notification is used, it is possible to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageNotification")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let event = MessageNotification(title: "title", body: "body", trigger: .push)\n    .notificationTimestamp("2020-12-31T15:59:60-08:00")\n    .action("action")\n    .bodyLocKey("loc key")\n    .bodyLocArgs(["loc arg1", "loc arg2"])\n    .sound("chime.mp3")\n    .notificationCount(9)\n    .category("category1")\n    .attachments([\n        MessageNotificationAttachment(identifier: "id", type: "type", url: "https://snowplow.io")\n    ]);\ntracker.track(event)\n')),(0,i.kt)("h2",{id:"deep-link"},"Deep Link"),(0,i.kt)("p",null,"The Deep Link is received by the mobile operating system and passed to the related app. Our mobile tracker can't automatically track the Deep Link, but we provide an out-of-the-box event that can be used by the developer to manually track it as soon as the Deep Link is received in the app."),(0,i.kt)("p",null,"It will be the duty of the tracker to automatically attach the information of the Deep Link to the first ScreenView tracked."),(0,i.kt)("p",null,"In practice, when the app receives a Deep Link the developer can track it through the DeepLinkReceived event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public func application(_ application: UIApplication,\n                        continue userActivity: NSUserActivity,\n                        restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool\n{\n    ...\n    if let url = userActivity.webpageURL {\n        let deepLinkEvent = DeepLinkReceived(url: userActivity.webpageURL.absoluteString)\n            .referrer(userActivity.referrerURL.absoluteString)\n        tracker.track(deepLinkEvent)\n    }\n    ...\n}\n")),(0,i.kt)("p",null,"The tracker keeps memory of the tracked Deep Link event and will attach a Deep Link entity to the first ScreenView tracked in the tracker. This is helpful during the analysis of the data because it will be clear the relation between the content visualized by the user (ScreenView event) and source (DeepLink entity) that originated that visualisation."),(0,i.kt)("p",null,"This behaviour is enabled by default but it can be disabled from the ",(0,i.kt)("inlineCode",{parentName:"p"},"TrackerConfiguration"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"let trackerConfig = TrackerConfiguration()\n    ...\n    .deepLinkContext(false)\n    ...\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DeepLinkReceived")," event can be used in pair with a ",(0,i.kt)("inlineCode",{parentName:"p"},"campaign-attribution-enrichment")," appropriately enabled in the Snowplow pipeline. It works exactly like for ",(0,i.kt)("inlineCode",{parentName:"p"},"PageView")," events in the web/JS tracker. When the user taps on an advertising banner or a marketing email or message, it can trigger the launch of the app through the Deep Linking feature. The referral from the advertising campaigns, websites, or other source can be composed by UTM parameters used to attribute the user activity back to the campaign. The Campaign Attribution Enrichment can parse the DeepLinkReceived event extracting the UTM parameters in the deep link url.")),(0,i.kt)(r.Z,{value:"android",label:"Android Tracker",mdxType:"TabItem"},(0,i.kt)("p",null,"The mobile trackers capture two types of events, automatically captured and manual events."),(0,i.kt)("h1",{id:"auto-tracking-1"},"Auto Tracking"),(0,i.kt)("p",null,"Automatically captured events in the Android Tracker are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"App Lifecycle Tracking"),": Captures application foreground and application background events."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Screen View Tracking"),": Captures each time a new \u201cscreen\u201d is loaded."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Exception Tracking"),": Captures any unhandled exceptions within the application."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Installation Tracking"),": Captures an install event which occurs the first time an application is opened.")),(0,i.kt)("p",null,"These are enabled in the tracker configuration. In this example, some helpful automatic contexts and all Autotracking is enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"TrackerConfiguration trackerConfiguration = new TrackerConfiguration(appId)       \n    .sessionContext(true)\n    .platformContext(true)\n    .applicationContext(true)\n    .screenContext(true)\n    .lifecycleAutotracking(true)\n    .screenViewAutotracking(true)\n    .exceptionAutotracking(true)\n    .installAutotracking(true);\n")),(0,i.kt)("h2",{id:"session-context-1"},"Session Context"),(0,i.kt)("p",null,"Client session tracking is activated by default but it can be disabled through the TrackerConfiguration as explained above. When enabled the tracker appends a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snowplow/iglu-central/blob/master/schemas/com.snowplowanalytics.snowplow/client_session/jsonschema/1-0-2"},"client","_","session")," context to each event it sends and it maintains this session information as long as the application is installed on the device."),(0,i.kt)("p",null,"Sessions correspond to tracked user activity. A session expires when no tracking events have occurred for the amount of time defined in a timeout (by default 30 minutes). The session timeout check is executed for each event tracked. If the gap between two consecutive events is longer than the timeout the session is renewed. There are two timeouts since a session can timeout in the foreground (while the app is visible) or in the background (when the app has been suspended, but not closed)."),(0,i.kt)("p",null,"The lifecycle events (",(0,i.kt)("inlineCode",{parentName:"p"},"application_foreground")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"application_background")," events) have a role in the session expiration. The lifecycle events can be enabled in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/introduction/#TrackerConfiguration"},"TrackerConfiguration")," enabling ",(0,i.kt)("inlineCode",{parentName:"p"},"lifecycleAutotracking")," (Note: on Android it requires ",(0,i.kt)("inlineCode",{parentName:"p"},"androidx.lifecycle:lifecycle-extensions"),"). Once enabled they will be fired automatically when the app moves from foreground state to background state and vice versa."),(0,i.kt)("p",null,"When the app moves from foreground to background the ",(0,i.kt)("inlineCode",{parentName:"p"},"application_background")," event is fired. If session tracking is enabled, the session context will be attached to the event checking the session expiration using the foreground timeout. When the app moves from background to foreground the ",(0,i.kt)("inlineCode",{parentName:"p"},"application_foreground")," event is fired. If session tracking is enabled, the session context will be attached to the event checking the session expiration using the background timeout."),(0,i.kt)("p",null,"For instance, with this configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"new SessionConfiguration(\n    new TimeMeasure(360, TimeUnit.SECONDS),\n    new TimeMeasure(15, TimeUnit.SECONDS)\n)\n")),(0,i.kt)("p",null,"the session would expire if the app is backgrounded for more than 15 seconds, like in this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"time: 0s - screen_view event - foreground timeout session check - session 1\ntime: 3s - application_background event - foreground timeout session check (3 < 360) - session 1\ntime: 30s - application_foreground event - background timeout session check (30 > 15) - session 2\n")),(0,i.kt)("p",null,"In the above example the ",(0,i.kt)("inlineCode",{parentName:"p"},"application_foreground")," event triggers a new session because the time spent on background (without tracked events) is bigger than the background timeout for the session."),(0,i.kt)("h3",{id:"session-callback-1"},"Session callback"),(0,i.kt)("p",null,"(Available from v3.1)"),(0,i.kt)("p",null,"The tracker allows the configuration of a callback to inform the app everytime a new session is created (in correspondence of a session timeout check). This can be configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionConfiguration")," and it provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionState")," where can be accessed all the info already tracked in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionContext"),"."),(0,i.kt)("p",null,"Below an example of where the session callback is used to print out the values of session every time a new session is generated by the tracker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'...\nSessionConfiguration sessionConfig = new SessionConfiguration(\n                new TimeMeasure(6, TimeUnit.SECONDS),\n                new TimeMeasure(30, TimeUnit.SECONDS)\n        )\n                .onSessionUpdate(state -> log("Session: " + state.getSessionId()));\n...\nSnowplow.createTracker(getApplicationContext(),\n                namespace,\n                networkConfiguration,\n                sessionConfiguration\n);\n')),(0,i.kt)("h2",{id:"custom-event-context-1"},"Custom Event Context"),(0,i.kt)("p",null,"Custom context can be used to augment any standard Snowplow event type, including self describing events, with additional data. We refer to this custom context as ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-events-entities/"},"Event Entities"),"."),(0,i.kt)("p",null,"Each custom context is an array of self-describing JSON following the same pattern as a self describing event. As with self describing events, if you want to create your own custom context, you must create a ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-schemas-and-validation/"},"JSON schema")," for it and upload it to an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snowplow/iglu"},"Iglu repository")," using the ",(0,i.kt)("a",{parentName:"p",href:"https://snowplow.io/snowplow-insights/"},"Snowplow BDP Console UI"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/managing-data-structures/"},"Data Structures API"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/pipeline-components-and-applications/iglu/"},"igluctl")," or one of the other supported Iglu clients."),(0,i.kt)("p",null,"Note: Even if only one custom context is being attached to an event, it still needs to be wrapped in an array."),(0,i.kt)("p",null,"Here are two example custom context JSONs. One describes a screen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    schema: 'iglu:com.example/screen/jsonschema/1-2-1',\n    data: {\n        screenType: 'test',\n        lastUpdated: '2021-06-11'\n    }\n}\n")),(0,i.kt)("p",null,"and the other describes a user on that screen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    schema: 'iglu:com.example/user/jsonschema/2-0-0',\n    data: {\n      userType: 'tester'\n    }\n}\n")),(0,i.kt)("h2",{id:"tracking-events-with-custom-context-1"},"Tracking events with Custom Context"),(0,i.kt)("p",null,"How to track a screen view with both of these contexts attached:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ScreenView event = new ScreenView("screen", UUID.randomUUID().toString());         \nevent.customContexts.add(\n    new SelfDescribingJson("iglu:com.example/screen/jsonschema/1-2-1",                         \n        new HashMap() {{\n            put("screenType", "test");\n            put("lastUpdated", "2021-06-11");\n        }})\n);\nevent.customContexts.add(\n    new SelfDescribingJson("iglu:com.example/user/jsonschema/2-0-0",                         \n        new HashMap() {{\n            put("userType", "tester");\n        }})\n);\ntracker.track(event);\n')),(0,i.kt)("p",null,"It is also possible to add contexts in a declarative way (see GlobalContextsConfiguration ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/mobile-trackers-v3-x/introduction/"},"here"),"), so that they are applied to all (or a subset of) events within an application."),(0,i.kt)("h1",{id:"manual-tracking-1"},"Manual Tracking"),(0,i.kt)("h2",{id:"self-describing-1"},"Self Describing"),(0,i.kt)("p",null,"You may wish to track events in your app which are not directly supported by Snowplow and which structured event tracking does not adequately capture. Your event may have more than the five fields offered by Structured events, or its fields may not fit into the category-action-label-property-value model. The solution is Snowplow\u2019s self-describing events. Self-describing events are a ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-schemas-and-validation/"},"data structure based on JSON Schemas")," and can have arbitrarily many fields."),(0,i.kt)("p",null,"To define your own custom event, you must create a ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/understanding-schemas-and-validation/"},"JSON schema")," for that event and upload it to an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/snowplow/iglu"},"Iglu Schema Repository")," using ",(0,i.kt)("a",{parentName:"p",href:"/docs/pipeline-components-and-applications/iglu/"},"igluctl")," (or if a Snowplow BDP customer, you can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/managing-data-structures/"},"Snowplow BDP Console UI")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/managing-data-structures-via-the-api-2/"},"Data Structures API"),"). Snowplow uses the schema to validate that the JSON containing the event properties is well-formed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Map properties = new HashMap();\nproperties.put("targetUrl", "http://a-target-url.com");\nSelfDescribingJson sdj = new SelfDescribingJson("iglu:com.snowplowanalytics.snowplow/link_click/jsonschema/1-0-1", attributes);\nSelfDescribing event = new SelfDescribing(sdj);\ntracker.track(event);\n')),(0,i.kt)("p",null,"A Self Describing event is a ",(0,i.kt)("a",{parentName:"p",href:"http://snowplowanalytics.com/blog/2014/05/15/introducing-self-describing-jsons/"},"self-describing JSON"),". It has two fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," field, containing the properties of the event"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"schema")," field, containing the location of the JSON schema against which the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," field should be validated.")),(0,i.kt)("h2",{id:"structured-1"},"Structured"),(0,i.kt)("p",null,"Our philosophy in creating Snowplow is that users should capture important consumer interactions and design suitable data structures for this data capture. You can read more about that philosophy ",(0,i.kt)("a",{parentName:"p",href:"/docs/understanding-tracking-design/"},"here"),". Using ",(0,i.kt)("inlineCode",{parentName:"p"},"trackSelfDescribingEvent")," captures these interactions with custom schemas, as desribed above."),(0,i.kt)("p",null,"However, as part of a Snowplow implementation there may be interactons where custom Self Describing events are perhaps too complex or unwarranted. They are then candidates to track using ",(0,i.kt)("inlineCode",{parentName:"p"},"Structured"),", if none of the other event-specific methods outlined below are appropriate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Structured event = Structured("my-category", "my-action")\n    .label("my-label")\n    .property("my-property")\n    .value(5);\ntracker.track(event);\n')),(0,i.kt)("h2",{id:"timing-1"},"Timing"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Timing")," events to track user timing events such as how long resources take to load."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Timing event = new Timing("timing-category", "timing-variable", 5)\n    .label("optional-label");\n                \ntracker.track(event);\n')),(0,i.kt)("h2",{id:"screen-view-1"},"Screen View"),(0,i.kt)("p",null,"Track the user viewing a screen within the application. This type of tracking is typically used when automatic screen view tracking is not suitable within your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ScreenView event = new ScreenView("screen", UUID.<em>randomUUID</em>().toString());\ntracker.track(event);\n')),(0,i.kt)("h2",{id:"consent-1"},"Consent"),(0,i.kt)("h3",{id:"consent-granted-1"},"Consent Granted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsentGranted")," event to track a user opting into data collection. A consent document context will be attached to the event using the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," arguments supplied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ConsentGranted event = new ConsentGranted("2018-05-08T18:12:02+00:00", "doc id", "1.2")\n        .documentDescription("doc description")\n        .documentName("doc name");\ntracker.track(event);\n')),(0,i.kt)("h3",{id:"consent-withdrawn-1"},"Consent Withdrawn"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConsentWithdrawn")," event to track a user withdrawing consent for data collection. A consent document context will be attached to the event using the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," arguments supplied. To specify that a user opts out of all data collection, ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," should be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ConsentWithdrawn event = new ConsentWithdrawn(true, "doc id", "1.2")\n        .documentDescription("doc description")\n        .documentName("doc name");\ntracker.track(event);\n')),(0,i.kt)("h2",{id:"ecommerce-transaction-1"},"Ecommerce Transaction"),(0,i.kt)("p",null,"Modelled on Google Analytics ecommerce tracking capability, Snowplow uses three steps that can be used together to track online transactions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Create a Ecommerce event.")," Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Ecommerce")," to initialize a transaction object. This will be the object that is loaded with all the data relevant to the specific transaction that is being tracked including all the items in the order, the prices of the items, the price of shipping and the ",(0,i.kt)("inlineCode",{parentName:"li"},"order_id"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Add items to the transaction.")," Create an array of ",(0,i.kt)("inlineCode",{parentName:"li"},"EcommerceItem")," to pass to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Ecommerce")," object."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Submit the transaction to Snowplow")," using the ",(0,i.kt)("inlineCode",{parentName:"li"},"track()")," method, once all the relevant data has been loaded into the object.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'EcommerceTransactionItem item = new EcommerceTransactionItem("sku-1", 35.00, 1)\n    .name("Acme 1")\n    .category("Stuff")\n    .currency("USD");\nList items = new LinkedList();\nitems.add(item);\nEcommerceTransaction event = new EcommerceTransaction("order-1", 40.00, items)\n    .shipping(5.00);\ntracker.track(event);\n')),(0,i.kt)("h2",{id:"push-and-local-notification-1"},"Push and Local Notification"),(0,i.kt)("p",null,"To track an event when a push (or local) notification is used, it is possible to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageNotification")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'MessageNotification event =\n    new MessageNotification("title", "body", MessageNotificationTrigger.push)\n                .notificationTimestamp("2020-12-31T15:59:60-08:00")\n                .action("action")\n                .bodyLocKey("loc key")\n                .bodyLocArgs(Arrays.asList("loc arg1", "loc arg2"))\n                .sound("chime.mp3")\n                .notificationCount(9)\n                .category("category1");\ntracker.track(event);\n')),(0,i.kt)("h2",{id:"deep-link-1"},"Deep Link"),(0,i.kt)("p",null,"The Deep Link is received by the mobile operating system and passed to the related app. Our mobile tracker can't automatically track the Deep Link, but we provide an out-of-the-box event that can be used by the developer to manually track it as soon as the Deep Link is received in the app."),(0,i.kt)("p",null,"It will be the duty of the tracker to automatically attach the information of the Deep Link to the first ScreenView tracked."),(0,i.kt)("p",null,"In practice, when the app receives a Deep Link the developer can track it through the DeepLinkReceived event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@Override\npublic void onCreate(Bundle savedInstanceState) {\n    ...\n    // Extract info from Intent\n    Intent intent = getIntent();\n    String deepLinkUrl = intent.getData().toString();\n    String referrer = null;\n    Bundle extras = intent.getExtras();\n    if (extras != null) {\n        Uri referrerUri = extras.get(Intent.EXTRA_REFERRER);\n        if (referrerUri != null) {\n            referrer = referrerUri.toString();\n        }\n    }\n    // Create and track the event\n    DeepLinkReceived event = new DeepLinkReceived(deepLinkUrl).referrer(referrer);\n    tracker.track(event);\n    ...\n}\n")),(0,i.kt)("p",null,"The tracker keeps memory of the tracked Deep Link event and will attach a Deep Link entity to the first ScreenView tracked in the tracker. This is helpful during the analysis of the data because it will be clear the relation between the content visualized by the user (ScreenView event) and source (DeepLink entity) that originated that visualisation."),(0,i.kt)("p",null,"This behaviour is enabled by default but it can be disabled from the ",(0,i.kt)("inlineCode",{parentName:"p"},"TrackerConfiguration"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"TrackerConfiguration config = new TrackerConfiguration()\n    ...\n    .deepLinkContext(false)\n    ...\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DeepLinkReceived")," event can be used in pair with a ",(0,i.kt)("inlineCode",{parentName:"p"},"campaign-attribution-enrichment")," appropriately enabled in the Snowplow pipeline. It works exactly like for ",(0,i.kt)("inlineCode",{parentName:"p"},"PageView")," events in the web/JS tracker. When the user taps on an advertising banner or a marketing email or message, it can trigger the launch of the app through the Deep Linking feature. The referral from the advertising campaigns, websites, or other source can be composed by UTM parameters used to attribute the user activity back to the campaign. The Campaign Attribution Enrichment can parse the DeepLinkReceived event extracting the UTM parameters in the deep link url."))))}m.isMDXComponent=!0}}]);