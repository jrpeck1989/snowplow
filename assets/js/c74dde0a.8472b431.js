"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[50533],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>d});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),p=function(e){var t=r.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},s=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(o),d=n,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return o?r.createElement(h,a(a({ref:t},s),{},{components:o})):r.createElement(h,a({ref:t},s))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,a=new Array(l);a[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var p=2;p<l;p++)a[p]=o[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},21137:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var r=o(87462),n=(o(67294),o(3905));const l={title:"Set up the stream collector",date:"2021-08-04",sidebar_position:-10},a=void 0,c={unversionedId:"pipeline-components-and-applications/stream-collector/setup/index",id:"pipeline-components-and-applications/stream-collector/setup/index",title:"Set up the stream collector",description:"Available on Terraform Registry",source:"@site/docs/pipeline-components-and-applications/stream-collector/setup/index.md",sourceDirName:"pipeline-components-and-applications/stream-collector/setup",slug:"/pipeline-components-and-applications/stream-collector/setup/",permalink:"/docs/pipeline-components-and-applications/stream-collector/setup/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/pipeline-components-and-applications/stream-collector/setup/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:-10,frontMatter:{title:"Set up the stream collector",date:"2021-08-04",sidebar_position:-10},sidebar:"defaultSidebar",previous:{title:"Stream Collector",permalink:"/docs/pipeline-components-and-applications/stream-collector/"},next:{title:"Configure the Stream Collector",permalink:"/docs/pipeline-components-and-applications/stream-collector/configure/"}},i={},p=[{value:"Available on Terraform Registry",id:"available-on-terraform-registry",level:2},{value:"Run the collector",id:"run-the-collector",level:2},{value:"Health check",id:"health-check",level:2}],s={toc:p};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"available-on-terraform-registry"},"Available on Terraform Registry"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://registry.terraform.io/modules/snowplow-devops/collector-kinesis-ec2/aws/latest"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/static/v1?label=Terraform&message=Registry&color=7B42BC&logo=terraform",alt:null}))),(0,n.kt)("p",null,"A Terraform module is available which deploys the stream collector on a AWS EC2 without the need for this manual setup."),(0,n.kt)("h2",{id:"run-the-collector"},"Run the collector"),(0,n.kt)("p",null,"The stream collector is on docker hub with several different flavours. Pull the image that matches the sink you are using:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker pull snowplow/scala-stream-collector-kinesis:2.7.0\ndocker pull snowplow/scala-stream-collector-pubsub:2.7.0\ndocker pull snowplow/scala-stream-collector-kafka:2.7.0\ndocker pull snowplow/scala-stream-collector-nsq:2.7.0\ndocker pull snowplow/scala-stream-collector-stdout:2.7.0\n")),(0,n.kt)("p",null,"The application is configured by passing a hocon file on the command line:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker run --rm \\\n  -v $PWD/config.hocon:/snowplow/config.hocon \\\n  -p 8080:8080 \\\n  snowplow/scala-stream-collector-${flavour}:2.7.0 --config /snowplow/config.hocon\n")),(0,n.kt)("p",null,"Alternatively, you can download and run ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/snowplow/stream-collector/releases"},"a jar file from the github release"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"java -jar scala-stream-collector-kinesis-2.7.0.jar --config /path/to/config.hocon\n")),(0,n.kt)("h2",{id:"health-check"},"Health check"),(0,n.kt)("p",null,"Pinging the collector on the /health path should return a 200 OK response:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"curl http://localhost:8080/health\n")))}u.isMDXComponent=!0}}]);