"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[95259],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=a.createContext({}),d=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(r.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(t),c=o,h=m["".concat(r,".").concat(c)]||m[c]||p[c]||i;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},16150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const i={title:"Configuring and running data models via Snowplow BDP",date:"2020-12-01",sidebar_position:40},l=void 0,s={unversionedId:"modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp/index",id:"modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp/index",title:"Configuring and running data models via Snowplow BDP",description:"Overview",source:"@site/docs/modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp/index.md",sourceDirName:"modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp",slug:"/modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp/",permalink:"/docs/modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/modeling-your-data/configuring-and-running-data-models-via-snowplow-bdp/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:40,frontMatter:{title:"Configuring and running data models via Snowplow BDP",date:"2020-12-01",sidebar_position:40},sidebar:"defaultSidebar",previous:{title:"Setup and run SQL Runner",permalink:"/docs/modeling-your-data/setup-and-run-sql-runner/"},next:{title:"Resolving data model failures (via Snowplow BDP)",permalink:"/docs/modeling-your-data/resolving-data-model-failures-via-snowplow-bdp/"}},r={},d=[{value:"Overview",id:"overview",level:3},{value:"1. Writing playbooks for your SQL scripts",id:"1-writing-playbooks-for-your-sql-scripts",level:3},{value:"2. The data modeling configuration",id:"2-the-data-modeling-configuration",level:3},{value:"2.1 Configuring data models via the data modeling UI (new)",id:"21-configuring-data-models-via-the-data-modeling-ui-new",level:4},{value:"2.2 Configuring data models via GitHub (old)",id:"22-configuring-data-models-via-github-old",level:4},{value:"Required fields",id:"required-fields",level:5},{value:"Additional optional fields",id:"additional-optional-fields",level:5},{value:"Make a schedule",id:"make-a-schedule",level:5},{value:"3. Monitor your model in the Snowplow BDP Console",id:"3-monitor-your-model-in-the-snowplow-bdp-console",level:3}],u={toc:d};function p(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("p",null,"If you are a Snowplow BDP customer, SQL Runner is already setup for you as part of your pipeline. Therefore, you can get started with configuring and deploying data models as outlined in the steps below."),(0,o.kt)("p",null,"As an initial overview, in your snowplow-pipeline repository, your data models reside in the sql-runner directory. If you already have the data modeling UI enabled, your GitHub repository will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 datamodeling\n|   \u251c\u2500\u2500 datamodel_name\n|       \u2514\u2500\u2500 sql-runner\n|           \u251c\u2500\u2500 playbooks\n|           \u2514\u2500\u2500 sql\n")),(0,o.kt)("p",null,"If you do not have the data modeling UI enabled, your GitHub repository will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 jobs\n|   \u251c\u2500\u2500 datamodel_name\n|       \u2514\u2500\u2500 sql-runner\n|           \u251c\u2500\u2500 configs\n|           \u251c\u2500\u2500 playbooks\n|           \u2514\u2500\u2500 sql\n\u2514\u2500\u2500 schedules\n")),(0,o.kt)("p",null,"Inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"datamodeling")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"jobs")," directory you can create the data models as subdirectories, giving them an appropriate name. The allowable characters for naming are ",(0,o.kt)("inlineCode",{parentName:"p"},"a-z,0-9,-"),"."),(0,o.kt)("p",null,"Each sql-runner subdirectory contains:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sql"),": the SQL scripts for your model"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"playbooks"),": the playbook(s) your data model consists of")),(0,o.kt)("p",null,"If you do not yet have the data modeling UI enabled, the subdirectory will also contain your data model configuration(s):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"configs"),": the configuration file(s) for your data model")),(0,o.kt)("p",null,"Furthermore, if you do not yet have the new data modeling UI enabled, the data model will have a corresponding JSON schedule file inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"schedules")," directory, that mainly defines the cron schedule to run it and the configuration file."),(0,o.kt)("p",null,"Behind the scenes, what happens is:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"When the schedule kicks off, the data model configuration is loaded and validated. Then, the corresponding data modeling DAG is autogenerated accordingly."),(0,o.kt)("li",{parentName:"ol"},"Each task in the datamodeling DAG corresponds to the execution of a playbook by SQL runner. Tasks can be sequential or parallel, exactly as you have defined them in your configuration (either in the UI or in the config file)."),(0,o.kt)("li",{parentName:"ol"},"The autogenerated DAG is essentially a Factotum factfile, which is then run.")),(0,o.kt)("p",null,"Read below for more details on the steps to configure and run your data models with Snowplow BDP."),(0,o.kt)("h3",{id:"1-writing-playbooks-for-your-sql-scripts"},"1","."," Writing playbooks for your SQL scripts"),(0,o.kt)("p",null,"As an example, one of the playbooks for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/snowplow/data-models/tree/master/web/v1"},"the Snowplow web data model")," against Redshift:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},':targets:\n- :name:\n  :type:     redshift\n  :host:\n  :database:\n  :port:\n  :username:\n  :password:\n  :ssl:\n:variables:\n  :model_version:      redshift/web/1.1.0\n  :scratch_schema:     scratch\n  :output_schema:      derived\n  :entropy:            ""\n  :upsert_lookback:\n  :stage_next:         true\n  :skip_derived:\n:steps:\n- :name: 00-setup-sessions\n  :queries:\n    - :name: 00-setup-sessions\n      :file: standard/03-sessions/01-main/00-setup-sessions.sql\n      :template: true\n- :name: 01-sessions-aggs\n  :queries:\n    - :name: 01-sessions-aggs\n      :file: standard/03-sessions/01-main/01-sessions-aggs.sql\n      :template: true\n- :name: 02-sessions-lasts\n  :queries:\n    - :name: 02-sessions-lasts\n      :file: standard/03-sessions/01-main/02-sessions-lasts.sql\n      :template: true\n- :name: 03-sessions\n  :queries:\n    - :name: 03-sessions\n      :file: standard/03-sessions/01-main/03-sessions.sql\n      :template: true\n- :name: 04-sessions-metadata\n  :queries:\n    - :name: 04-sessions-metadata\n      :file: standard/03-sessions/01-main/04-sessions-metadata.sql\n      :template: true\n- :name: 05-sessions-prep-manifest\n  :queries:\n    - :name: 05-sessions-prep-manifest\n      :file: standard/03-sessions/01-main/05-sessions-prep-manifest.sql\n      :template: true\n- :name: 06-commit-sessions\n  :queries:\n    - :name: 06-commit-sessions\n      :file: standard/03-sessions/01-main/06-commit-sessions.sql\n      :template: true\n')),(0,o.kt)("p",null,"This way, a playbook organizes on a lower level the SQL scripts to run in linear fashion or in parallel, defines the variables and provides the credentials to run the queries against your storage target."),(0,o.kt)("h3",{id:"2-the-data-modeling-configuration"},"2","."," The data modeling configuration"),(0,o.kt)("h4",{id:"21-configuring-data-models-via-the-data-modeling-ui-new"},"2.1 Configuring data models via the data modeling UI (new)"),(0,o.kt)("p",null,"Data models can now be configured via the Snowplow BDP Console:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(62243).Z,width:"3584",height:"680"})),(0,o.kt)("p",null,"In the first step, you can provide the data model name, a description as well as the owner(s) of the data model that will be alerted in case of failure."),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(2365).Z,width:"1496",height:"1722"})),(0,o.kt)("p",null,"Please note that the model name needs to correspond to the corresponding datamodeling subfolder name in GitHub. The SQL and playbooks for the model in the above example would therefore live under:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"your snowplow-pipeline repo > datamodeling > data model name > sql-runner ...")),(0,o.kt)("p",null,"In the second step, you can then add the schedule and configure the lock type:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(11678).Z,width:"1434",height:"1512"})),(0,o.kt)("p",null,"Please note that the cron schedule is in UTC."),(0,o.kt)("p",null,"The lock determines what happens when a data model fails. There can be cases when it is not safe for the model to re-run. That is what a ",(0,o.kt)("inlineCode",{parentName:"p"},'"hard"')," lock does: The data model cannot re-run after a failure, unless it is explicitly unlocked. For it to be unlocked, you will need to make the necessary changes and then contact the Snowplow Support team to unlock it."),(0,o.kt)("p",null,"On the other hand, when a data model is safe to re-run, then you can specify the ",(0,o.kt)("inlineCode",{parentName:"p"},'"lockType"')," as ",(0,o.kt)("inlineCode",{parentName:"p"},'"soft"'),". The benefit of the soft lock is that you do not need to email Support to unlock a model after a failure and thus, you will be able to resume a model once it has been fixed."),(0,o.kt)("p",null,"Warning"),(0,o.kt)("p",null,'Do not change the lock type to "soft" for any data models that either unload or delete atomic data as this may cause data loss!'),(0,o.kt)("p",null,"In the third and last step you can configure which playbooks you want to run as part of this model, in what order:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(53350).Z,width:"3082",height:"1818"})),(0,o.kt)("p",null,"You can verify the DAG that will be generated based on the JSON by clicking 'Preview':"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(1438).Z,width:"1428",height:"1022"})),(0,o.kt)("p",null,"Once you are happy with the playbook configuration, you can create the model. The model will be disabled until you enable it:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(45946).Z,width:"1212",height:"612"})),(0,o.kt)("p",null,"Please make sure all your SQL and playbooks are merged to ",(0,o.kt)("inlineCode",{parentName:"p"},"master"),' in GitHub before enabling the model. Note that this tooling no longer runs a "sync and deploy" process. Any changes merged to ',(0,o.kt)("inlineCode",{parentName:"p"},"master")," are available immediately."),(0,o.kt)("h4",{id:"22-configuring-data-models-via-github-old"},"2.2 Configuring data models via GitHub (old)"),(0,o.kt)("p",null,"The data modeling configuration is a JSON file that allows you to specify which playbooks will run as part of a single data model (or job) as well as additional options such as the lock type and the owner."),(0,o.kt)("p",null,"An example configuration file with all options provided:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "schema": "iglu:com.snowplowanalytics.datamodeling/config/jsonschema/1-0-0",\n  "data": {\n    "dagName": "datamodeling",\n    "enabled": true,\n    "storage": "Default",\n    "sqlRunner": "0.9.1",\n    "lockType": "soft",\n    "playbooks": [\n      {\n          "playbook": "page-views",\n          "dependsOn": []\n      },\n      {\n        "playbook": "sessions",\n        "dependsOn": [ "page-views" ]\n      }\n    ],\n    "owners": [\n      {\n          "name": "Bob Foo",\n          "email": "bob@foo.com"\n      },\n      {\n          "name": "Alice Bar",\n          "email": "alice@bar.com"\n      }\n    ]\n  }\n}\n')),(0,o.kt)("h5",{id:"required-fields"},"Required fields"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"enabled"'),": Specifies whether the data modeling job will run (",(0,o.kt)("inlineCode",{parentName:"li"},"true"),") or not (",(0,o.kt)("inlineCode",{parentName:"li"},"false"),"). This is a way to disable or re-enable your data modeling job, even without changing the schedule."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"storage"'),": Specifies your data warehouse. Possible values are:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"Default"'),": When your storage target is Redshift or Snowflake."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"BigQuery"'),": When your storage target is BigQuery."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"playbooks"'),": This is the array that specifies the playbooks to run and their inter-dependencies. Every playbook, as a JSON object, needs to specify the fields:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"name"'),": the playbook name and"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"dependsOn"'),": an array denoting any other playbook names, that this playbook depends on (can be empty)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"lockType"'),": This specifies what happens when your data model fails. Possible values:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"hard"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"soft"'))))),(0,o.kt)("p",null,"When a SQL Runner DAG fails there are cases when it is not safe for the model to re-run. That is what a ",(0,o.kt)("inlineCode",{parentName:"p"},'"hard"')," lock does: The data model cannot re-run after a failure, unless it is explicitly unlocked. For it to be unlocked, you will need to make the necessary changes and then contact the Snowplow Support team to unlock it."),(0,o.kt)("p",null,"On the other hand, when a data model is safe to re-run, then you can specify the ",(0,o.kt)("inlineCode",{parentName:"p"},'"lockType"')," as ",(0,o.kt)("inlineCode",{parentName:"p"},'"soft"'),". The benefit of the soft lock is that you do not need to email Support to unlock a model after a failure and thus, you will be able to resume a model once it has been fixed."),(0,o.kt)("p",null,"Warning"),(0,o.kt)("p",null,'Do not change the lock type to "soft" for any data models that either unload or delete atomic data as this may cause data loss!'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"owners"'),": ","[","This field is required, if the ",(0,o.kt)("inlineCode",{parentName:"li"},'"lockType"')," is ",(0,o.kt)("inlineCode",{parentName:"li"},'"soft"'),".","]")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},'"owners"')," field allows Snowplow BDP customers to specify one or more owners (",(0,o.kt)("inlineCode",{parentName:"p"},'"name"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"email"'),") when deploying a data model. The model owners will get email notifications as soon as there is a data modeling failure. Along with the ",(0,o.kt)("inlineCode",{parentName:"p"},'"lockType"'),", these options give you more control over your data models, since they enable you to know immediately when a data model fails, deploy fixes faster and resolve any issues directly."),(0,o.kt)("h5",{id:"additional-optional-fields"},"Additional optional fields"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"dagName"'),": ","[","Default value: ",(0,o.kt)("inlineCode",{parentName:"li"},'"datamodeling"'),"]",". The name of the data modeling DAG."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'"sqlRunner"'),": ","[","Default value: ",(0,o.kt)("inlineCode",{parentName:"li"},'"0.9.1"'),"]",". The SQL Runner version that runs your playbooks.")),(0,o.kt)("h5",{id:"make-a-schedule"},"Make a schedule"),(0,o.kt)("p",null,"The schedule is a JSON file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"schedules")," directory through which you can specify the cron schedule that you want SQL Runner to run your data model. It also specifies the corresponding configuration file. As an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "schema": "iglu:com.snowplowanalytics.managed-service/job_schedule/jsonschema/1-0-0",\n  "data": {\n    "interval": "15 * * * *",\n    "job": "com.acme-datamodel_name",\n    "dag": "common/dags/sql-runner/autogen/gen-datamodeling-0.2.0.factfile"\n  }\n}\n')),(0,o.kt)("p",null,"The above schedule specifies that your data model will run every hour past 15 minutes. It does not specify a configuration file, which is meant to denote that the configuration file has the default name: ",(0,o.kt)("inlineCode",{parentName:"p"},"datamodeling.json")),(0,o.kt)("p",null,"If the filename of the configuration of your data model is other than ",(0,o.kt)("inlineCode",{parentName:"p"},"datamodeling.json"),", then it just needs to be specified:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "schema": "iglu:com.snowplowanalytics.managed-service/job_schedule/jsonschema/1-0-0",\n  "data": {\n    "interval": "15 * * * *",\n    "job": "com.acme-datamodel_name",\n    "dag": "common/dags/sql-runner/autogen/gen-datamodeling-0.2.0.factfile",\n    "env": [\n      {\n        "key": "configuration",\n        "value": "config-filename.json"\n      }\n    ]\n  }\n}\n')),(0,o.kt)("h3",{id:"3-monitor-your-model-in-the-snowplow-bdp-console"},"3","."," Monitor your model in the Snowplow BDP Console"),(0,o.kt)("p",null,"Everything is set and you can now monitor your data models running against your data warehouse from the Snowplow BDP Console, in the Jobs UI! There you can see the data modeling DAG generated, and monitor the status, duration and run times both at the data model and at the playbook level."))}p.isMDXComponent=!0},62243:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Screenshot-2021-11-15-at-20.15.28-33570c56672d335d297fb5912cd1d67d.png"},2365:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Screenshot-2021-11-15-at-20.20.44-ae985e2daf6e1757d4c983c460026d6e.png"},11678:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Screenshot-2021-11-15-at-20.24.42-1078893c0ec5e80f1830ca7278a871f1.png"},53350:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Screenshot-2021-11-15-at-20.25.13-754b1004f050e1bd8a6dc8afdfd6163a.png"},1438:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Screenshot-2021-11-15-at-20.25.31-18c629ef1e5fde400a402c6bbe8b9336.png"},45946:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Screenshot-2021-11-15-at-20.25.53-a1ce3b207a38d9cf77f111f1b06c6f1e.png"}}]);