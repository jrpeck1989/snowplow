"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[34955],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>k});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),p=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},s=function(t){var e=p(t.components);return n.createElement(d.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,d=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),c=p(a),k=r,u=c["".concat(d,".").concat(k)]||c[k]||m[k]||o;return a?n.createElement(u,l(l({ref:e},s),{},{components:a})):n.createElement(u,l({ref:e},s))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var d in e)hasOwnProperty.call(e,d)&&(i[d]=e[d]);i.originalType=t,i.mdxType="string"==typeof t?t:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},99979:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={title:"Android (0.2.0) / Java (0.6.0)",date:"2020-03-02",sidebar_position:990},l=void 0,i={unversionedId:"collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0/index",id:"collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0/index",title:"Android (0.2.0) / Java (0.6.0)",description:"1\\. Overview",source:"@site/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0/index.md",sourceDirName:"collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0",slug:"/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0/",permalink:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-2-0-java-0-6-0/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:990,frontMatter:{title:"Android (0.2.0) / Java (0.6.0)",date:"2020-03-02",sidebar_position:990},sidebar:"defaultSidebar",previous:{title:"Android (0.3.0)",permalink:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-3-0/"},next:{title:"Android (0.1.0) / Java (0.5.0)",permalink:"/docs/collecting-data/collecting-from-own-applications/mobile-trackers/previous-versions/android-tracker/android-0-1-0-java-0-5-0/"}},d={},p=[{value:"1. Overview",id:"1-overview",level:2},{value:"1.1 Android specific",id:"11-android-specific",level:3},{value:"2 Initialization",id:"2-initialization",level:2},{value:"2.1 Importing the module",id:"21-importing-the-module",level:3},{value:"2.2 Understanding the module structure for Android",id:"22-understanding-the-module-structure-for-android",level:3},{value:"2.3 Creating a Tracker",id:"23-creating-a-tracker",level:3},{value:"2.3.1\xa0<code>emitter</code>",id:"231emitter",level:4},{value:"2.3.2\xa0<code>subject</code>",id:"232subject",level:4},{value:"2.3.3\xa0<code>namespace</code>",id:"233namespace",level:4},{value:"2.3.4\xa0<code>appId</code>",id:"234appid",level:4},{value:"2.3.5\xa0<code>base64Encoded</code>",id:"235base64encoded",level:4},{value:"2.3.6 Change the tracker&#39;s platform with\xa0<code>setPlatform</code>",id:"236-change-the-trackers-platform-withsetplatform",level:3},{value:"3. Adding extra data: the Subject class",id:"3-adding-extra-data-the-subject-class",level:2},{value:"3.2 Set user ID with\xa0<code>setUserId</code>",id:"32-set-user-id-withsetuserid",level:3},{value:"3.3 Set screen resolution with\xa0<code>setScreenResolution</code>",id:"33-set-screen-resolution-withsetscreenresolution",level:3},{value:"3.4 Set viewport dimensions with\xa0<code>setViewport</code>",id:"34-set-viewport-dimensions-withsetviewport",level:3},{value:"3.5 Set color depth with\xa0<code>setColorDepth</code>",id:"35-set-color-depth-withsetcolordepth",level:3},{value:"3.6 Set timezone with\xa0<code>setTimezone</code>",id:"36-set-timezone-withsettimezone",level:3},{value:"3.7 Set the language with\xa0<code>setLanguage</code>",id:"37-set-the-language-withsetlanguage",level:3},{value:"4. Tracking specific events",id:"4-tracking-specific-events",level:2},{value:"4.1 Common",id:"41-common",level:3},{value:"4.1.1 Custom contexts",id:"411-custom-contexts",level:3},{value:"4.1.2 Optional timestamp &amp; context argument",id:"412-optional-timestamp--context-argument",level:3},{value:"4.1.3 Tracker method return values",id:"413-tracker-method-return-values",level:3},{value:"4.2 Track screen views with\xa0<code>trackScreenView()</code>",id:"42-track-screen-views-withtrackscreenview",level:3},{value:"4.3 Track pageviews with\xa0<code>trackPageView()</code>",id:"43-track-pageviews-withtrackpageview",level:3},{value:"4.4 Track ecommerce transactions with\xa0<code>trackEcommerceTransaction()</code>",id:"44-track-ecommerce-transactions-withtrackecommercetransaction",level:3},{value:"4.4.1 Ecommerce TransactionItem with\xa0<code>trackEcommerceTransaction()</code>",id:"441-ecommerce-transactionitem-withtrackecommercetransaction",level:3},{value:"4.5 Track structured events with\xa0<code>trackStructuredEvent()</code>",id:"45-track-structured-events-withtrackstructuredevent",level:3},{value:"4.6 Track unstructured events with\xa0<code>trackUnstructuredEvent()</code>",id:"46-track-unstructured-events-withtrackunstructuredevent",level:3},{value:"5. Sending event:\xa0<code>Emitter</code>",id:"5-sending-eventemitter",level:2},{value:"Android Only",id:"android-only",level:3},{value:"5.1 Using a buffer",id:"51-using-a-buffer",level:3},{value:"5.2 Choosing the HTTP method",id:"52-choosing-the-http-method",level:3},{value:"5.3 Method of sending HTTP requests",id:"53-method-of-sending-http-requests",level:3},{value:"Android Only",id:"android-only-1",level:3},{value:"5.4 Emitter callback",id:"54-emitter-callback",level:3},{value:"6. Payload",id:"6-payload",level:2},{value:"6.1 Tracker Payload",id:"61-tracker-payload",level:3},{value:"6.2 Schema Payload",id:"62-schema-payload",level:3},{value:"7. Logging",id:"7-logging",level:2},{value:"Android Only",id:"android-only-2",level:3}],s={toc:p};function m(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1-overview"},"1","."," Overview"),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow-java-tracker"},"Snowplow Java Tracker"),"\xa0allows you to track Snowplow events from your Java-based desktop and server apps, servlets and games. It supports JDK6+."),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow-android-tracker"},"Snowplow Android Tracker"),"\xa0allows you to track Snowplow events from your Android applications and games. It supports applications using the Android SDK 11 and above."),(0,r.kt)("p",null,"The tracker should be straightforward to use if you are comfortable with Java development; its API is modelled after Snowplow's\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Python-Tracker"},"Python Tracker"),"\xa0so any prior experience with that tracker is helpful but not necessary. If you haven't already, have a look at the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Java-Tracker-Setup"},"Java Tracker Setup"),"\xa0or\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-Tracker-Setup"},"Android Tracker Setup"),"\xa0guide before continuing."),(0,r.kt)("h3",{id:"11-android-specific"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#11-android-specific"}),"1.1 Android specific"),(0,r.kt)("p",null,"The Android Tracker is based off of the Java Tracker core library which was also used by the Java Tracker up to version 0.6.0. Hence, they both very similar in features and with a few differences in them. For sections of this documentation which only apply to Android, we will flag with a sub-section,\xa0",(0,r.kt)("strong",{parentName:"p"},"Android Only"),"."),(0,r.kt)("h2",{id:"2-initialization"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#2-initialization"}),"2 Initialization"),(0,r.kt)("p",null,"Assuming you have completed the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-Tracker-Setup"},"Android Tracker Setup"),"\xa0or\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Java-Tracker-Setup"},"Java Tracker Setup"),"\xa0for your project, you are now ready to initialize the Android/Java Tracker."),(0,r.kt)("h3",{id:"21-importing-the-module"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#21-importing-the-module"}),"2.1 Importing the module"),(0,r.kt)("p",null,"Import the Java Tracker's classes into your Java code like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import com.snowplowanalytics.snowplow.tracker.*;\n")),(0,r.kt)("p",null,"That's it - you are now ready to initialize a Tracker instance."),(0,r.kt)("h3",{id:"22-understanding-the-module-structure-for-android"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#22-understanding-the-module-structure-for-android"}),"2.2 Understanding the module structure for Android"),(0,r.kt)("p",null,"As we've mentioned in the setup guides, the Android Tracker is still based off a Java core library (which was part of the Java Tracker until version 0.6.0 inclusive). This means that for the Android Tracker you'll find a set the core libraries in\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"com.snowplowanalytics.snowplow.tracker.core.*"),". If you're using the Android Tracker you would use the classes in\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"com.snowplowanalytics.snowplow.tracker.android.*"),", since it contains class overrides specific to Android. If the class doesn't exist in that module (mostly enums), you can use the ones in the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"core"),"\xa0package instead."),(0,r.kt)("h3",{id:"23-creating-a-tracker"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#23-creating-a-tracker"}),"2.3 Creating a Tracker"),(0,r.kt)("p",null,"To instantiate a tracker in your code (can be global or local to the process being tracked) simply instantiate the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Tracker"),"\xa0interface with one of the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Tracker(Emitter emitter, String namespace, String appId)\nTracker(Emitter emitter, Subject subject, String namespace, String appId)\nTracker(Emitter emitter, String namespace, String appId, boolean base64Encoded)\nTracker(Emitter emitter, Subject subject, String namespace, String appId, boolean base64Encoded)\n")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Tracker t1 = new Tracker(emitter, user1Subject, "AF003", "cf", true);\nTracker t2 = new Tracker(emitter, "AF003", "cf");\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument Name")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emitter")),(0,r.kt)("td",{parentName:"tr",align:null},"The Emitter object you create"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"subject")),(0,r.kt)("td",{parentName:"tr",align:null},"The subject that defines a user"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"namespace")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the tracker instance"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"appId")),(0,r.kt)("td",{parentName:"tr",align:null},"The application ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"base64Encoded")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to enable\xa0",(0,r.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Base64"},"base 64 encoding")),(0,r.kt)("td",{parentName:"tr",align:null},"No (Default true)")))),(0,r.kt)("h4",{id:"231emitter"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#231-emitter"}),"2.3.1\xa0",(0,r.kt)("inlineCode",{parentName:"h4"},"emitter")),(0,r.kt)("p",null,"The emitter to which the tracker will send events. See\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#emitter"},"Emitters"),"\xa0for more on emitter configuration."),(0,r.kt)("h4",{id:"232subject"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#232-subject"}),"2.3.2\xa0",(0,r.kt)("inlineCode",{parentName:"h4"},"subject")),(0,r.kt)("p",null,"The user which the Tracker will track. This should be an instance of the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#subject"},"Subject"),"\xa0class. You don't need to set this during Tracker construction; you can use the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Tracker.setSubject"),"\xa0method afterwards. In fact, you don't need to create a subject at all. If you don't, though, your events won't contain user-specific data such as timezone and language."),(0,r.kt)("h4",{id:"233namespace"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#233-namespace"}),"2.3.3\xa0",(0,r.kt)("inlineCode",{parentName:"h4"},"namespace")),(0,r.kt)("p",null,"If provided, the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),"\xa0argument will be attached to every event fired by the new tracker. This allows you to later identify which tracker fired which event if you have multiple trackers running."),(0,r.kt)("h4",{id:"234appid"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#234-appid"}),"2.3.4\xa0",(0,r.kt)("inlineCode",{parentName:"h4"},"appId")),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"appId"),"\xa0argument lets you set the application ID to any string."),(0,r.kt)("h4",{id:"235base64encoded"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#235-base64encoded"}),"2.3.5\xa0",(0,r.kt)("inlineCode",{parentName:"h4"},"base64Encoded")),(0,r.kt)("p",null,"By default, unstructured events and custom contexts are encoded into Base64 to ensure that no data is lost or corrupted. You can turn encoding on or off using the Boolean\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"base64Encoded"),"\xa0argument."),(0,r.kt)("h3",{id:"236-change-the-trackers-platform-withsetplatform"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#236-change-the-trackers-platform-with-setplatform"}),"2.3.6 Change the tracker's platform with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setPlatform")),(0,r.kt)("p",null,"You can change the platform by calling:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'tracker.setPlatform("cnsl");\n')),(0,r.kt)("p",null,"For a full list of supported platforms, please see the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Snowplow-Tracker-Protocol"},"Snowplow Tracker Protocol"),"."),(0,r.kt)("h2",{id:"3-adding-extra-data-the-subject-class"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#3-adding-extra-data-the-subject-class"}),"3","."," Adding extra data: the Subject class"),(0,r.kt)("p",null,"You may have additional information about your application's environment, current user and so on, which you want to send to Snowplow with each event."),(0,r.kt)("p",null,"The Subject class has a set of\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"set...()"),"\xa0methods to attach extra data relating to the user to all tracked events:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#set-user-id"},(0,r.kt)("inlineCode",{parentName:"a"},"setUserId"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#set-screen-resolution"},(0,r.kt)("inlineCode",{parentName:"a"},"setScreenResolution"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#set-viewport-dimensions"},(0,r.kt)("inlineCode",{parentName:"a"},"setViewport"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#set-color-depth"},(0,r.kt)("inlineCode",{parentName:"a"},"setColorDepth"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#set-timezone"},(0,r.kt)("inlineCode",{parentName:"a"},"setTimezone"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#set-lang"},(0,r.kt)("inlineCode",{parentName:"a"},"setLanguage")))),(0,r.kt)("p",null,"Here are some examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'s1.setUserID("Kevin Gleason");\ns1.setLanguage("en-gb");\ns1.setScreenResolution(1920, 1080);\n')),(0,r.kt)("p",null,"After that, you can add your Subject to your Tracker like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Tracker(emitter, s1, namespace, appId);\n// OR\nt1.setSubject(s1);\n")),(0,r.kt)("h3",{id:"32-set-user-id-withsetuserid"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#32-set-user-id-with-setuserid"}),"3.2 Set user ID with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setUserId")),(0,r.kt)("p",null,"You can set the user ID to any string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'s1.setUserId( "{{USER ID}}" )\n')),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'s1.setUserId("alexd")\n')),(0,r.kt)("h3",{id:"33-set-screen-resolution-withsetscreenresolution"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#33-set-screen-resolution-with-setscreenresolution"}),"3.3 Set screen resolution with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setScreenResolution")),(0,r.kt)("p",null,"If your Java code has access to the device's screen resolution, then you can pass this in to Snowplow too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"t1.setScreenResolution( {{WIDTH}}, {{HEIGHT}} )\n")),(0,r.kt)("p",null,"Both numbers should be positive integers; note the order is width followed by height. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"t1.setScreenResolution(1366, 768)\n")),(0,r.kt)("h3",{id:"34-set-viewport-dimensions-withsetviewport"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#34-set-viewport-dimensions-with-setviewport"}),"3.4 Set viewport dimensions with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setViewport")),(0,r.kt)("p",null,"If your Java code has access to the viewport dimensions, then you can pass this in to Snowplow too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setViewport( {{WIDTH}}, {{HEIGHT}} )\n")),(0,r.kt)("p",null,"Both numbers should be positive integers; note the order is width followed by height. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setViewport(300, 200)\n")),(0,r.kt)("h3",{id:"35-set-color-depth-withsetcolordepth"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#35-set-color-depth-with-setcolordepth"}),"3.5 Set color depth with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setColorDepth")),(0,r.kt)("p",null,"If your Java code has access to the bit depth of the device's color palette for displaying images, then you can pass this in to Snowplow too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setColorDepth( {{BITS PER PIXEL}} )\n")),(0,r.kt)("p",null,"The number should be a positive integer, in bits per pixel. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setColorDepth(32)\n")),(0,r.kt)("h3",{id:"36-set-timezone-withsettimezone"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#36-set-timezone-with-settimezone"}),"3.6 Set timezone with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setTimezone")),(0,r.kt)("p",null,"This method lets you pass a user's timezone in to Snowplow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setTimezone( {{TIMEZONE}} )\n")),(0,r.kt)("p",null,"The timezone should be a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'s.setTimezone("Europe/London")\n')),(0,r.kt)("h3",{id:"37-set-the-language-withsetlanguage"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#37-set-the-language-with-setlanguage"}),"3.7 Set the language with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"setLanguage")),(0,r.kt)("p",null,"This method lets you pass a user's language in to Snowplow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setLanguage( {{LANGUAGE}} )\n")),(0,r.kt)("p",null,"The language should be a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"s.setLanguage('en')\n")),(0,r.kt)("h2",{id:"4-tracking-specific-events"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#4-tracking-specific-events"}),"4","."," Tracking specific events"),(0,r.kt)("p",null,"Snowplow has been built to enable you to track a wide range of events that occur when users interact with your websites and apps. We are constantly growing the range of functions available in order to capture that data more richly."),(0,r.kt)("p",null,"Tracking methods supported by the Java Tracker at a glance:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Function")),(0,r.kt)("th",{parentName:"tr",align:null},"*",(0,r.kt)("em",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#screen-view"},(0,r.kt)("inlineCode",{parentName:"a"},"trackScreenView()"))),(0,r.kt)("td",{parentName:"tr",align:null},"Track the user viewing a screen within the application")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#page-view"},(0,r.kt)("inlineCode",{parentName:"a"},"trackPageView()"))),(0,r.kt)("td",{parentName:"tr",align:null},"Track and record views of web pages.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#ecommerce-transaction"},(0,r.kt)("inlineCode",{parentName:"a"},"trackEcommerceTransaction()"))),(0,r.kt)("td",{parentName:"tr",align:null},"Track an ecommerce transaction and its items")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#struct-event"},(0,r.kt)("inlineCode",{parentName:"a"},"trackStructuredEvent()"))),(0,r.kt)("td",{parentName:"tr",align:null},"Track a Snowplow custom structured event")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#unstruct-event"},(0,r.kt)("inlineCode",{parentName:"a"},"trackUnstructuredEvent()"))),(0,r.kt)("td",{parentName:"tr",align:null},"Track a Snowplow custom unstructured event")))),(0,r.kt)("h3",{id:"41-common"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#41-common"}),"4.1 Common"),(0,r.kt)("p",null,"All events are tracked with specific methods on the tracker instance, of the form\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackXXX()"),", where\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"XXX"),"\xa0is the name of the event to track."),(0,r.kt)("h3",{id:"411-custom-contexts"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#411-custom-contexts"}),"4.1.1 Custom contexts"),(0,r.kt)("p",null,"In short, custom contexts let you add additional information about the circumstances surrounding an event in the form of a Map object. Each tracking method accepts an additional optional contexts parameter after all the parameters specific to that method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"t1.trackPageView(String pageUrl, String pageTitle, String referrer);\nt1.trackPageView(String pageUrl, String pageTitle, String referrer, List<SchemaPayload> context);\nt1.trackPageView(String pageUrl, String pageTitle, String referrer, double timestamp);\nt1.trackPageView(String pageUrl, String pageTitle, String referrer, List<SchemaPayload> context, double timestamp);\n")),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"context"),"\xa0argument should consist of a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"List"),"\xa0of\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaPayload"),"\xa0representing an array of one or more contexts. The format of each individual context element is the same as for an\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#unstruct-event"},"unstructured event"),"."),(0,r.kt)("p",null,"If a visitor arrives on a page advertising a movie, the context dictionary might look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "schema": "iglu:com.acme_company/movie_poster/jsonschema/2.1.1",\n  "data": {\n    "movie_name": "Solaris",\n    "poster_country": "JP",\n    "poster_year": "1978"\n  }\n}\n')),(0,r.kt)("p",null,"Note that even if there is only one custom context attached to the event, it still needs to be placed in an array."),(0,r.kt)("h3",{id:"412-optional-timestamp--context-argument"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#412-optional-timestamp--context-argument"}),"4.1.2 Optional timestamp & context argument"),(0,r.kt)("p",null,"In all the trackers, we offer a way to set the timestamp if you want the event to show as tracked at a specific time. If you don't, we create a timestamp while the event is being tracked."),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'t1.trackPageView("www.page.com", "Example Page", "www.referrer.com");\nt1.trackPageView("www.page.com", "Example Page", "www.referrer.com", contextArray);\nt1.trackPageView("www.page.com", "Example Page", "www.referrer.com", contextArray, 12348567890);\nt1.trackPageView("www.page.com", "Example Page", "www.referrer.com", 12348567890);\n')),(0,r.kt)("h3",{id:"413-tracker-method-return-values"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#413-tracker-method-return-values"}),"4.1.3 Tracker method return values"),(0,r.kt)("p",null,"To be confirmed. As of now, trackers do not return anything."),(0,r.kt)("h3",{id:"42-track-screen-views-withtrackscreenview"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#42-track-screen-views-with-trackscreenview"}),"4.2 Track screen views with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"trackScreenView()")),(0,r.kt)("p",null,"Use\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackScreenView()"),"\xa0to track a user viewing a screen (or equivalent) within your app. Arguments are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Validation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"Human-readable name for this screen"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"Unique identifier for this screen"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Custom context for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timestamp for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Long")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'t1.trackScreenView("HUD > Save Game", "screen23");\nt1.trackScreenView("HUD > Save Game", contextList, 123456);\n')),(0,r.kt)("h3",{id:"43-track-pageviews-withtrackpageview"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#43-track-pageviews-with-trackpageview"}),"4.3 Track pageviews with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"trackPageView()")),(0,r.kt)("p",null,"If you are using Java servlet technology or similar to serve webpages to a browser, you can use\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackPageView()"),"\xa0to track a user viewing a page within your app."),(0,r.kt)("p",null,"Arguments are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Validation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"page_url")),(0,r.kt)("td",{parentName:"tr",align:null},"The URL of the page"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"page_title")),(0,r.kt)("td",{parentName:"tr",align:null},"The title of the page"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"referrer")),(0,r.kt)("td",{parentName:"tr",align:null},"The address which linked to the page"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Custom context for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timestamp for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Long")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'t1.trackPageView("www.example.com", "example", "www.referrer.com", contextList);\nt1.trackPageView("www.example.com", "example", "www.referrer.com");\n')),(0,r.kt)("h3",{id:"44-track-ecommerce-transactions-withtrackecommercetransaction"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#44-track-ecommerce-transactions-with-trackecommercetransaction"}),"4.4 Track ecommerce transactions with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"trackEcommerceTransaction()")),(0,r.kt)("p",null,"Use\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackEcommerceTransaction()"),"\xa0to track an ecommerce transaction."),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Validation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"order_id")),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the eCommerce transaction"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"total_value")),(0,r.kt)("td",{parentName:"tr",align:null},"Total transaction value"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"affiliation")),(0,r.kt)("td",{parentName:"tr",align:null},"Transaction affiliation"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tax_value")),(0,r.kt)("td",{parentName:"tr",align:null},"Transaction tax value"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"shipping")),(0,r.kt)("td",{parentName:"tr",align:null},"Delivery cost charged"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"city")),(0,r.kt)("td",{parentName:"tr",align:null},"Delivery address city"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:null},"Delivery address state"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"country")),(0,r.kt)("td",{parentName:"tr",align:null},"Delivery address country"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")),(0,r.kt)("td",{parentName:"tr",align:null},"Transaction currency"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"items")),(0,r.kt)("td",{parentName:"tr",align:null},"Items in the transaction"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Custom context for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Map")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timestamp for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Long")))),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"items"),"\xa0argument is a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"List"),"\xa0of individual\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionItem"),"\xa0elements representing the items in the e-commerce transaction. Note that\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackEcommerceTransaction"),"\xa0fires multiple events: one transaction event for the transaction as a whole, and one transaction item event for each element of the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"items"),"\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"List"),". Each transaction item event will have the same timestamp, order","_","id, and currency as the main transaction event."),(0,r.kt)("h3",{id:"441-ecommerce-transactionitem-withtrackecommercetransaction"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#441-ecommerce-transactionitem-with-trackecommercetransaction"}),"4.4.1 Ecommerce TransactionItem with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"trackEcommerceTransaction()")),(0,r.kt)("p",null,"To instantiate a TransactionItem in your code, simply use the following constructor signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"trackEcommerceTransactionItem(String order_id, String sku, Double price, Integer quantity, String name, String category, String currency, Map context, long transaction_id)\n")),(0,r.kt)("p",null,"These are the fields that can appear as elements in each\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionItem"),"\xa0element of the transaction item\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"List"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Validation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"order_id")),(0,r.kt)("td",{parentName:"tr",align:null},"Order ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sku")),(0,r.kt)("td",{parentName:"tr",align:null},"Item SKU"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"price")),(0,r.kt)("td",{parentName:"tr",align:null},"Item price"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"double")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"quantity")),(0,r.kt)("td",{parentName:"tr",align:null},"Item quantity"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"Item name"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"category")),(0,r.kt)("td",{parentName:"tr",align:null},"Item category"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")),(0,r.kt)("td",{parentName:"tr",align:null},"Item currency"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Item context"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timestamp for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Long")))),(0,r.kt)("p",null,"Example of tracking a transaction containing two items:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// Example to come, in the meantime here is the type signature:\nt1.trackEcommerceTransaction(String order_id, Double total_value, String affiliation, Double tax_value,Double shipping, String city, String state, String country, String currency, List<TransactionItem> items, List<SchemaPayload> context);\nt1.trackEcommerceTransaction("6a8078be", 300, "my_affiliate", 30, 10, "Boston", "Massachusetts", "USA", "USD", items, context);\n')),(0,r.kt)("h3",{id:"45-track-structured-events-withtrackstructuredevent"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#45-track-structured-events-with-trackstructuredevent"}),"4.5 Track structured events with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"trackStructuredEvent()")),(0,r.kt)("p",null,"Use\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackStructuredEvent()"),"\xa0to track a custom event happening in your app which fits the Google Analytics-style structure of having up to five fields (with only the first two required):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Validation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"category")),(0,r.kt)("td",{parentName:"tr",align:null},"The grouping of structured events which this\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"action"),"\xa0belongs to"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"action")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines the type of user interaction which this event involves"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:null},"A string to provide additional dimensions to the event data"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"property")),(0,r.kt)("td",{parentName:"tr",align:null},"A string describing the object or the action performed on it"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},"A value to provide numerical data about the event"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Custom context for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timestamp for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Long")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'t1.trackStructuredEvent("shop", "add-to-basket", "Add To Basket", "pcs", 2);\nt1.trackStructuredEvent("shop", "add-to-basket", "Add To Basket", "pcs", 2, 123456.7);\n')),(0,r.kt)("h3",{id:"46-track-unstructured-events-withtrackunstructuredevent"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#46-track-unstructured-events-with-trackunstructuredevent"}),"4.6 Track unstructured events with\xa0",(0,r.kt)("inlineCode",{parentName:"h3"},"trackUnstructuredEvent()")),(0,r.kt)("p",null,"Custom unstructured events are a flexible tool that enable Snowplow users to define their own event types and send them into Snowplow."),(0,r.kt)("p",null,"When a user sends in a custom unstructured event, they do so as a JSON of name-value properties, that conforms to a JSON schema defined for the event earlier."),(0,r.kt)("p",null,"Use\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"trackUnstructuredEvent()"),"\xa0to track a custom event which consists of a name and an unstructured set of properties. This is useful when:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You want to track event types which are proprietary/specific to your business (i.e. not already part of Snowplow), or"),(0,r.kt)("li",{parentName:"ul"},"You want to track events which have unpredictable or frequently changing properties")),(0,r.kt)("p",null,"The arguments are as follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Validation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"eventData")),(0,r.kt)("td",{parentName:"tr",align:null},"The properties of the event"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"SchemaPayload")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Custom context for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timestamp for the event"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Long")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"t1.trackUnstructuredEvent(eventData, contextList);\n")),(0,r.kt)("p",null,"For more on JSON schema, see the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://snowplow.io/blog/2014/05/15/introducing-self-describing-jsons/"},"blog post"),"."),(0,r.kt)("h2",{id:"5-sending-eventemitter"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#5-sending-event-emitter"}),"5","."," Sending event:\xa0",(0,r.kt)("inlineCode",{parentName:"h2"},"Emitter")),(0,r.kt)("p",null,"Events are sent using an\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Emitter"),"\xa0class. You can initialize an class with a collector endpoint URL with various options to choose how these events should be sent. Here are the Emitter interfaces that can be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Emitter(String URI)\nEmitter(String URI, HttpMethod httpMethod)\nEmitter(String URI, RequestCallback callback)\nEmitter(String URI, HttpMethod httpMethod, RequestCallback callback)\n")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Emitter e1 = new Emitter("d3rkrsqld9gmqf.cloudfront.net");\nEmitter e2 = new Emitter("d3rkrsqld9gmqf.cloudfront.net", HttpMethod.POST);\nEmitter e3 = new Emitter("d3rkrsqld9gmqf.cloudfront.net", new RequestCallback() {...});\nEmitter e4 = new Emitter("d3rkrsqld9gmqf.cloudfront.net", HttpMethod.POST, new RequestCallback() {...});\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument Name")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"URI")),(0,r.kt)("td",{parentName:"tr",align:null},"The collector endpoint URI events will be sent to"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"httpMethod")),(0,r.kt)("td",{parentName:"tr",align:null},"The HTTP method events should be sent"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"callback")),(0,r.kt)("td",{parentName:"tr",align:null},"Lets you pass a callback class to handle succes/failure in sending events."),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h3",{id:"android-only"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#android-only"}),"Android Only"),(0,r.kt)("p",null,"For Android, the Emitter class is virtually the same in the way it is instantiated with the addition of an extra parameter to accept a\xa0",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/content/Context.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Context")),". The\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Context"),"\xa0is used for caching events in an\xa0",(0,r.kt)("a",{parentName:"p",href:"http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html"},"SQLite database"),"\xa0in order to avoid losing events to network related issues."),(0,r.kt)("p",null,"Here are what the Emitter interfaces for Android looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Emitter(String URI, Context context)\nEmitter(String URI, Context context, HttpMethod httpMethod)\nEmitter(String URI, Context context, RequestCallback callback)\nEmitter(String URI, HttpMethod httpMethod, RequestCallback callback, Context context)\n")),(0,r.kt)("p",null,"For example, if you're creating an Emitter in an\xa0",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/app/Activity.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Activity")),"\xa0class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Emitter e1 = new Emitter("snowplow-collector.acme.com", this);\nEmitter e2 = new Emitter("snowplow-collector.acme.com", this, HttpMethod.POST);\nEmitter e3 = new Emitter("snowplow-collector.acme.com", this, new RequestCallback() {...});\nEmitter e4 = new Emitter("snowplow-collector.acme.com", this, HttpMethod.POST, new RequestCallback() {...});\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Argument Name")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Required?")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"URI")),(0,r.kt)("td",{parentName:"tr",align:null},"The collector endpoint URI events will be sent to"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Used to use to open or create an SQLite database"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"httpMethod")),(0,r.kt)("td",{parentName:"tr",align:null},"The HTTP method events should be sent"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"callback")),(0,r.kt)("td",{parentName:"tr",align:null},"Lets you pass a callback class to handle succes/failure in sending events."),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h3",{id:"51-using-a-buffer"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#51-using-a-buffer"}),"5.1 Using a buffer"),(0,r.kt)("p",null,"A buffer is used to group events together in bulk before sending them. This is especially handy to reduce network usage. By default, the Emitter buffers up to 10 events before sending them. You can change this to send evenets instantly as soon as they are created like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Emitter e1 = new Emitter("d3rkrsqld9gmqf.cloudfront.net");\ne1.setBufferOption(BufferOption.Instant);\n// OR\ne1.setBufferOption(BufferOption.Default);\n')),(0,r.kt)("p",null,"Here are all the posibile options that you can use:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Option")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Instant")),(0,r.kt)("td",{parentName:"tr",align:null},"Events are sent as soon as they are created")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Default")),(0,r.kt)("td",{parentName:"tr",align:null},"Sends events in a group when 10 events are created")))),(0,r.kt)("h3",{id:"52-choosing-the-http-method"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#52-choosing-the-http-method"}),"5.2 Choosing the HTTP method"),(0,r.kt)("p",null,"Snowplow supports receiving events via GET requests, but will soon have POST support. In a GET request, each event is sent in individual request. With POST requests, events are bundled together in one request."),(0,r.kt)("p",null,"You can set the HTTP method in the Emitter constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Emitter e1 = new Emitter("d3rkrsqld9gmqf.cloudfront.net", HttpMethod.POST);\n')),(0,r.kt)("p",null,"Here are all the posibile options that you can use:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Option")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GET")),(0,r.kt)("td",{parentName:"tr",align:null},"Sends events as GET requests")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"POST")),(0,r.kt)("td",{parentName:"tr",align:null},"Sends events as POST requests")))),(0,r.kt)("h3",{id:"53-method-of-sending-http-requests"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#53-method-of-sending-http-requests"}),"5.3 Method of sending HTTP requests"),(0,r.kt)("p",null,"An Emitter sends requests synchronously by default. If you want events to be sent asynchronously you can set this using\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"setRequestMethod(RequestMethod)"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Emitter e1 = new Emitter("d3rkrsqld9gmqf.cloudfront.net");\ne1.setRequestMethod(RequestMethod.Asynchronous);\n')),(0,r.kt)("p",null,"Here are all the possible options that you can use:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Option")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Synchronous")),(0,r.kt)("td",{parentName:"tr",align:null},"Sends events synchronously")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Asynchronous")),(0,r.kt)("td",{parentName:"tr",align:null},"Sends events asynchronously")))),(0,r.kt)("h3",{id:"android-only-1"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#android-only-1"}),"Android Only"),(0,r.kt)("p",null,"For Android, we only send events asynchronously so we've deprecated the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"setRequestMethod"),"\xa0method."),(0,r.kt)("h3",{id:"54-emitter-callback"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#54-emitter-callback"}),"5.4 Emitter callback"),(0,r.kt)("p",null,"If an event fails to send because of a network issue, you can choose to handle the failure case with a callback class to react accordingly. The callback class needs to implement the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"EmitterCallback"),"\xa0interface in order to do so. Here is a sample bit of code to show how it could work:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Emitter emitter = new Emitter(testURL, HttpMethod.GET, new RequestCallback() {\n  @Override\n  public void onSuccess(int bufferLength) {\n    System.out.println("Buffer length for POST/GET:" + bufferLength);\n  }\n\n  @Override\n  public void onFailure(int successCount, List<Payload> failedEvent) {\n    System.out.println("Failure, successCount: " + successCount + "\\nfailedEvent:\\n" + failedEvent.toString());\n  }\n});\n')),(0,r.kt)("p",null,"In the example, we we can see an in-line example of handling the case. If events are all successfully sent, the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"onSuccess"),"\xa0method returns the number of successful events sent. If there were any failures, the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"onFailure"),"\xa0method returns the successful events sent (if any) and a\xa0",(0,r.kt)("em",{parentName:"p"},"list of events"),"\xa0that failed to be sent (i.e. the HTTP state code did not return 200)."),(0,r.kt)("h2",{id:"6-payload"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#6-payload"}),"6","."," Payload"),(0,r.kt)("p",null,"A Payload interface is used for implementing a\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#tracker-payload"},"TrackerPayload"),"\xa0and\xa0",(0,r.kt)("a",{parentName:"p",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#schema-payload"},"SchemaPayload"),", but accordingly, can be used to implement your own Payload class if you choose."),(0,r.kt)("h3",{id:"61-tracker-payload"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#61-tracker-payload"}),"6.1 Tracker Payload"),(0,r.kt)("p",null,"A TrackerPayload is used internally within the Java Tracker to create the tracking event payloads that are passed to an Emitter to be sent accordingly."),(0,r.kt)("h3",{id:"62-schema-payload"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#62-schema-payload"}),"6.2 Schema Payload"),(0,r.kt)("p",null,"A SchemaPayload is used primarily as a wrapper around a TrackerPayload. After creating a TrackerPayload, you create a SchemaPayload and use\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"setData"),"\xa0with the Payload, followed by,\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"setSchema"),"\xa0to set the schema that the payload will be used against."),(0,r.kt)("p",null,"This is mainly used under the hood, in the Tracker class but is useful to know if you want to create your own Tracker class."),(0,r.kt)("p",null,"Here's a short example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// This is our TrackerPayload that we created\nTrackerPayload trackerPayload = new TrackerPayload();\ntrackerPayload.add("key", "value");\n\n// We wrap that payload in a SchemaPayload before sending it.\nSchemaPayload schemaPayload = new SchemaPayload();\nschemaPayload.setData(trackerPayload);\nschemaPayload.setSchema("iglu:com.snowplowanalytics.snowplow/example/jsonschema/1-0-0");\n')),(0,r.kt)("h2",{id:"7-logging"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#7-logging"}),"7","."," Logging"),(0,r.kt)("p",null,"Logging in the Tracker is done using SLF4J. Majority of the logging set as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG"),"\xa0so will not overly populate your own logging."),(0,r.kt)("h3",{id:"android-only-2"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/snowplow/snowplow/wiki/Android-and-Java-Tracker#android-only-2"}),"Android Only"),(0,r.kt)("p",null,"Logging in the Android Tracker uses Android's\xa0",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/util/Log.html"},"native logger"),"\xa0set as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG"),"\xa0or\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"ERROR"),"\xa0with the ","[",(0,r.kt)("inlineCode",{parentName:"p"},"tag"),"]","(","[https://developer.android.com/reference/android/util/Log.html#d(java.lang.String]","(",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/util/Log.html#d(java.lang.String)"},"https://developer.android.com/reference/android/util/Log.html#d(java.lang.String)"),", java.lang.String)) as the class name."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'private final String TAG = Emitter.class.getName();\nLog.e(TAG, "Cannot change RequestMethod: Asynchronous requests only available.");\n')))}m.isMDXComponent=!0}}]);