"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[93167],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>u});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),s=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=s(n),u=r,v=g["".concat(c,".").concat(u)]||g[u]||d[u]||o;return n?t.createElement(v,i(i({ref:a},p),{},{components:n})):t.createElement(v,i({ref:a},p))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},86292:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=n(87462),r=(n(67294),n(3905));const o={title:"Payload and logging",date:"2022-05-12",sidebar_position:100},i=void 0,l={unversionedId:"collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging/index",id:"collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging/index",title:"Payload and logging",description:"A Payload interface is used for implementing a TrackerPayload and SelfDescribingJson, but accordingly, can be used to implement your own Payload class if you choose.",source:"@site/docs/collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging/index.md",sourceDirName:"collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging",slug:"/collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging/",permalink:"/docs/collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/payload-and-logging/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:100,frontMatter:{title:"Payload and logging",date:"2022-05-12",sidebar_position:100},sidebar:"defaultSidebar",previous:{title:"Emitter",permalink:"/docs/collecting-data/collecting-from-own-applications/java-tracker/previous-versions/java-tracker-v0-11/emitter/"},next:{title:"Python Tracker",permalink:"/docs/collecting-data/collecting-from-own-applications/python-tracker/"}},c={},s=[{value:"Tracker Payload",id:"tracker-payload",level:3},{value:"SelfDescribingJson",id:"selfdescribingjson",level:3},{value:"Logging",id:"logging",level:2}],p={toc:s};function d(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A Payload interface is used for implementing a TrackerPayload and SelfDescribingJson, but accordingly, can be used to implement your own Payload class if you choose."),(0,r.kt)("h3",{id:"tracker-payload"},"Tracker Payload"),(0,r.kt)("p",null,"A TrackerPayload is used internally within the Java Tracker to create the tracking event payloads that are passed to an Emitter to be sent accordingly. It is essentially a wrapper around a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"LinkedHashMap<String, String>"),"\xa0and does basic validation to ensure all key-value pairs are valid non-null and non-empty Strings."),(0,r.kt)("h3",{id:"selfdescribingjson"},"SelfDescribingJson"),(0,r.kt)("p",null,"A SelfDescribingJson is used primarily to ease construction of self-describing JSON objects. It is a wrapper around a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"LinkedHashMap<String, Object>"),"\xa0and will only ever contain two key-value pairs. A\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"schema"),"\xa0key with a valid schema value and a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"data"),"\xa0key containing a\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Map"),"\xa0of key-value pairs."),(0,r.kt)("p",null,"This is used under the hood but is also useful for to know about when attaching custom contexts to events or creating\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Unstructured"),"\xa0events."),(0,r.kt)("p",null,"Here's a short example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// This is the Map we have created\nMap<String, String> eventData = new HashMap<>();\neventData.put("Event", "Data")\n\n// We wrap that map in a SelfDescribingJson before sending it\nSelfDescribingJson json = new SelfDescribingJson("iglu:com.acme/example/jsonschema/1-0-0", eventData);\n')),(0,r.kt)("h2",{id:"logging"},"Logging"),(0,r.kt)("p",null,"Logging in the Tracker is done using SLF4J. The majority of the logging set as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG"),"\xa0so it will not overly populate your own logging."),(0,r.kt)("p",null,"Since Java tracker v0.11, user-supplied values are only logged at ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," level."))}d.isMDXComponent=!0}}]);