"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[41121],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"Monitoring",date:"2020-05-07",sidebar_position:40},i=void 0,s={unversionedId:"managing-data-quality/snowplow-event-recovery/0-2-monitoring/index",id:"managing-data-quality/snowplow-event-recovery/0-2-monitoring/index",title:"Monitoring",description:"In order to verify the process is running properly there are several locations in infrastructure that can be monitored, depending on your runtime environment these are failedOutput (S3/GCS bucket), unrecoverableOutput (S3/GCS bucket), output (Kinesis/PubSub streams) and job runners (tracking job status and processing in real-time).",source:"@site/docs/managing-data-quality/snowplow-event-recovery/0-2-monitoring/index.md",sourceDirName:"managing-data-quality/snowplow-event-recovery/0-2-monitoring",slug:"/managing-data-quality/snowplow-event-recovery/0-2-monitoring/",permalink:"/docs/managing-data-quality/snowplow-event-recovery/0-2-monitoring/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/managing-data-quality/snowplow-event-recovery/0-2-monitoring/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:40,frontMatter:{title:"Monitoring",date:"2020-05-07",sidebar_position:40},sidebar:"defaultSidebar",previous:{title:"Extending",permalink:"/docs/managing-data-quality/snowplow-event-recovery/extending/"},next:{title:"Troubleshooting",permalink:"/docs/managing-data-quality/snowplow-event-recovery/troubleshooting/"}},l={},c=[{value:"Amazon EMR",id:"amazon-emr",level:3},{value:"Google Dataflow",id:"google-dataflow",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to verify the process is running properly there are several locations in ",(0,a.kt)("strong",{parentName:"p"},"infrastructure")," that can be monitored, depending on your runtime environment these are: datasinks (for recovery job processed output): ",(0,a.kt)("inlineCode",{parentName:"p"},"failedOutput")," (S3/GCS bucket), ",(0,a.kt)("inlineCode",{parentName:"p"},"unrecoverableOutput")," (S3/GCS bucket), ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," (Kinesis/PubSub streams) and job runners (tracking job status and processing in real-time)."),(0,a.kt)("p",null,'Beyond monitoring infrastructure, each job exposes "business" processing metrics that summarise failed, unrecoverable and recovered bad rows that have been processed.'),(0,a.kt)("h3",{id:"amazon-emr"},"Amazon EMR"),(0,a.kt)("p",null,"On EMR recovery job exposes run summary using a ",(0,a.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/monitoring.html"},"built-in reporting library delivering")," count summaries for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event-recovery.driver.summary.Recovered")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event-recovery.driver.summary.Failed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event-recovery.driver.summary.Unrecoverable"))),(0,a.kt)("p",null,"The metrics can be accessed trough variety of ways (sinks) and can be configured upon cluster creation parameters."),(0,a.kt)("p",null,"To enable desired sink set EMR's ",(0,a.kt)("inlineCode",{parentName:"p"},"spark-metrics")," classification parameters following ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/spark/blob/master/conf/metrics.properties.template"},"possible values")," using EMR's classifiers."),(0,a.kt)("p",null,"To expose metrics over http accessible at ",(0,a.kt)("inlineCode",{parentName:"p"},"http://${SPARK_HOST}:4040/metrics/json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  {\n    "classification": "spark-metrics",\n    "properties": {\n        "spark.metrics.namespace": "event-revovery",\n        "*.sink.servlet.class": "org.apache.spark.metrics.sink.MetricsServlet",\n        "*.sink.servlet.period": "1",\n        "*.sink.servlet.unit": "seconds",\n        "*.sink.servlet.path": "/metrics/json",\n        "master.sink.servlet.path": "/metrics/master/json",\n        "applications.sink.servlet.path": "metrics/applications/json",\n        "*.source.metrics.class": "org.apache.spark.metrics.source.Metrics"\n\n    }\n')),(0,a.kt)("p",null,"To push metrics to output logs to console appender:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  {\n    "classification": "spark-metrics",\n    "properties": {\n        "spark.metrics.namespace": "$name",\n        "*.sink.console.class": "org.apache.spark.metrics.sink.ConsoleSink",\n        "*.source.metrics.class": "org.apache.spark.metrics.source.Metrics"\n\n    }\n')),(0,a.kt)("p",null,"For more sinks see ",(0,a.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/monitoring.html"},"Spark documentation on monitoring"),"."),(0,a.kt)("h3",{id:"google-dataflow"},"Google Dataflow"),(0,a.kt)("p",null,"On Google Dataflow recovery job exposes realtime run metrics using a dataflow's native functions. The metrics are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"recovered")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"failed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"unrecoverable"))),(0,a.kt)("p",null,"The metrics can be accessed through the web UI directly in Dataflow."))}u.isMDXComponent=!0}}]);