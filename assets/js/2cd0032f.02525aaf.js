"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[48427],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(t),m=o,g=s["".concat(u,".").concat(m)]||s[m]||d[m]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=s;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},30309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={title:"Beam",date:"2020-04-14",sidebar_position:0},i=void 0,l={unversionedId:"managing-data-quality/snowplow-event-recovery/running/beam/index",id:"managing-data-quality/snowplow-event-recovery/running/beam/index",title:"Beam",description:"The Beam job reads data from a GCS location specified through a pattern and stores the recovered payloads in a PubSub topic, unrecovered and unrecoverable in other GCS buckets.",source:"@site/docs/managing-data-quality/snowplow-event-recovery/running/beam/index.md",sourceDirName:"managing-data-quality/snowplow-event-recovery/running/beam",slug:"/managing-data-quality/snowplow-event-recovery/running/beam/",permalink:"/docs/managing-data-quality/snowplow-event-recovery/running/beam/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/managing-data-quality/snowplow-event-recovery/running/beam/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:0,frontMatter:{title:"Beam",date:"2020-04-14",sidebar_position:0},sidebar:"defaultSidebar",previous:{title:"Running",permalink:"/docs/managing-data-quality/snowplow-event-recovery/running/"},next:{title:"Flink",permalink:"/docs/managing-data-quality/snowplow-event-recovery/running/flink/"}},u={},c=[{value:"Building",id:"building",level:4},{value:"Running",id:"running",level:4}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Beam job reads data from a GCS location specified through a pattern and stores the recovered payloads in a PubSub topic, unrecovered and unrecoverable in other GCS buckets."),(0,o.kt)("h4",{id:"building"},"Building"),(0,o.kt)("p",null,"To build the docker image, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sbt beam/docker:publishLocal\n")),(0,o.kt)("h4",{id:"running"},"Running"),(0,o.kt)("p",null,"To run on Apache Beam in GCP Dataflow run it through a docker-deployment like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run \\\n  snowplow-event-recovery-beam:0.2.0 \\\n   --runner=DataFlowRunner \\\n   --job-name=${JOB_NAME} \\\n   --project=${PROJECT_ID} \\\n   --zone=${ZONE} \\\n   --gcpTempLocation=gs://${TEMP_BUCKET_PATH} \\\n   --inputDirectory=gs://${SOURCE_BUCKET_PATH}/** \\\n   --outputTopic=${OUTPUT_PUBSUB} \\\n   --failedOutput=gs://${UNRECOVERED_BUCKET_PATH} \\\n   --unrecoverableOutput=gs://${UNRECOVERABLE_BUCKET_PATH} \\\n   --config=${JOB_CONFIG} \\\n   --resolver=${RESOLVER_CONFIG}\n")))}d.isMDXComponent=!0}}]);