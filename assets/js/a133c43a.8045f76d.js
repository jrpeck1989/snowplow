"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[36986],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?i.createElement(h,a(a({ref:t},p),{},{components:n})):i.createElement(h,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},15466:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(87462),o=(n(67294),n(3905));const r={title:"Iglu Common Architecture",date:"2021-03-26",sidebar_position:0},a=void 0,c={unversionedId:"pipeline-components-and-applications/iglu/common-architecture/index",id:"pipeline-components-and-applications/iglu/common-architecture/index",title:"Iglu Common Architecture",description:"Iglu is built on a set of technical design decisions which are documented in this section. It is this set of design decisions that allow Iglu clients and repositories to interoperate.",source:"@site/docs/pipeline-components-and-applications/iglu/common-architecture/index.md",sourceDirName:"pipeline-components-and-applications/iglu/common-architecture",slug:"/pipeline-components-and-applications/iglu/common-architecture/",permalink:"/docs/pipeline-components-and-applications/iglu/common-architecture/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/pipeline-components-and-applications/iglu/common-architecture/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:0,frontMatter:{title:"Iglu Common Architecture",date:"2021-03-26",sidebar_position:0},sidebar:"defaultSidebar",previous:{title:"Iglu",permalink:"/docs/pipeline-components-and-applications/iglu/"},next:{title:"SchemaVer",permalink:"/docs/pipeline-components-and-applications/iglu/common-architecture/schemaver/"}},s={},l=[{value:"Common architecture aspects",id:"common-architecture-aspects",level:2}],p={toc:l};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Iglu is built on a set of technical design decisions which are documented in this section. It is this set of design decisions that allow Iglu clients and repositories to interoperate."),(0,o.kt)("h2",{id:"common-architecture-aspects"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/snowplow/iglu/wiki/Common-architecture#common-architecture-aspects"}),"Common architecture aspects"),(0,o.kt)("p",null,"Please review the following design documents:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/pipeline-components-and-applications/iglu/common-architecture/self-describing-json-schemas/"},"Self-describing JSON Schemas"),"\xa0- simple extensions to JSON Schema which\xa0",(0,o.kt)("strong",{parentName:"li"},"semantically identify"),"\xa0and version a given JSON Schema"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/pipeline-components-and-applications/iglu/common-architecture/self-describing-jsons/"},"Self-describing JSONs"),"\xa0- a standardized JSON format which co-locates a reference to the instance's JSON Schema alongside the instance's data"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/pipeline-components-and-applications/iglu/common-architecture/schemaver/"},"SchemaVer"),"\xa0- how we semantically version schemas"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/pipeline-components-and-applications/iglu/common-architecture/schema-resolution/"},"Schema resolution"),"\xa0- our public algorithm for how we determine in which order we check Iglu repositories for a given schema")))}m.isMDXComponent=!0}}]);