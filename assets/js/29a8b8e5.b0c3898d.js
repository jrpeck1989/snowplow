"use strict";(self.webpackChunkdocsite_poc_github_io=self.webpackChunkdocsite_poc_github_io||[]).push([[37193],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},40473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={title:"Tracking specific client-side properties",date:"2022-03-24",sidebar_position:40},o=void 0,l={unversionedId:"collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties/index",id:"collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties/index",title:"Tracking specific client-side properties",description:"An event describes a single, transient activity. The context in which that event occurs - the relatively persistent environment - is also incredibly valuable data. As discussed on the previous page, the most powerful way to track such data is to use custom self-describing JSON entities. These are sent as JSON in the raw event payload. Depending on your data warehouse, event context entities are loaded into their own tables, or remain as JSON in the loaded event.",source:"@site/docs/collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties/index.md",sourceDirName:"collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties",slug:"/collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties/",permalink:"/docs/collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties/",draft:!1,editUrl:"https://github.com/snowplow/snowplow.github.io/tree/main/docs/collecting-data/collecting-from-own-applications/java-tracker/tracking-specific-client-side-properties/index.md",tags:[],version:"current",lastUpdatedAt:1662725915,formattedLastUpdatedAt:"Sep 9, 2022",sidebarPosition:40,frontMatter:{title:"Tracking specific client-side properties",date:"2022-03-24",sidebar_position:40},sidebar:"defaultSidebar",previous:{title:"Custom tracking using schemas",permalink:"/docs/collecting-data/collecting-from-own-applications/java-tracker/custom-tracking-using-schemas/"},next:{title:"Configuring how events are sent",permalink:"/docs/collecting-data/collecting-from-own-applications/java-tracker/configuring-how-events-are-sent/"}},s={},c=[{value:"Overriding autogenerated event properties",id:"overriding-autogenerated-event-properties",level:3},{value:"Adding <code>Subject</code> properties to events",id:"adding-subject-properties-to-events",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An event describes a single, transient activity. The context in which that event occurs - the relatively persistent environment - is also incredibly valuable data. As discussed on the previous page, the most powerful way to track such data is to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/java-tracker/custom-tracking-using-schemas/"},"custom self-describing JSON entities"),". These are sent as JSON in the raw event payload. Depending on your data warehouse, event context entities are loaded into their own tables, or remain as JSON in the loaded event."),(0,i.kt)("p",null,'The Java tracker provides an additional "canonical" method to track a small subset of contextual data, using the ',(0,i.kt)("inlineCode",{parentName:"p"},"Subject"),' class. As with the "canonical" ',(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/java-tracker/tracking-events/"},"Event types"),", e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"PageView"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject"),' properties directly populate the "atomic" fields of the raw event payload. These data will always end up in individual columns of the main event table in the data warehouse.'),(0,i.kt)("p",null,"The fields tracked using ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," tend to be most relevant in client-side tracking. Some are set automatically in all events during enrichment, even when no ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," is added. These properties are marked with ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," below, and discussed below. Timezone, marked with ",(0,i.kt)("inlineCode",{parentName:"p"},"**"),", is set when a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," is tracked with the event."),(0,i.kt)("p",null,"Add these fields to an event using ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject"),":"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Field in raw event"),(0,i.kt)("th",{parentName:"tr",align:null},"Column(s) in enriched event"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"userId"),(0,i.kt)("td",{parentName:"tr",align:null},"uid"),(0,i.kt)("td",{parentName:"tr",align:null},"user_id")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ipAddress*"),(0,i.kt)("td",{parentName:"tr",align:null},"ip"),(0,i.kt)("td",{parentName:"tr",align:null},"user_ipaddress")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"timezone**"),(0,i.kt)("td",{parentName:"tr",align:null},"tz"),(0,i.kt)("td",{parentName:"tr",align:null},"os_timezone")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"language"),(0,i.kt)("td",{parentName:"tr",align:null},"lang"),(0,i.kt)("td",{parentName:"tr",align:null},"br_lang")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"useragent*"),(0,i.kt)("td",{parentName:"tr",align:null},"ua"),(0,i.kt)("td",{parentName:"tr",align:null},"useragent")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"viewport"),(0,i.kt)("td",{parentName:"tr",align:null},"vp"),(0,i.kt)("td",{parentName:"tr",align:null},"br_viewheight, br_viewwidth")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"screenResolution"),(0,i.kt)("td",{parentName:"tr",align:null},"res"),(0,i.kt)("td",{parentName:"tr",align:null},"dvce_screenheight, dvce_screenwidth")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"colorDepth"),(0,i.kt)("td",{parentName:"tr",align:null},"cd"),(0,i.kt)("td",{parentName:"tr",align:null},"br_colordepth")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"networkUserId*"),(0,i.kt)("td",{parentName:"tr",align:null},"tnuid"),(0,i.kt)("td",{parentName:"tr",align:null},"network_userid")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"domainUserId"),(0,i.kt)("td",{parentName:"tr",align:null},"duid"),(0,i.kt)("td",{parentName:"tr",align:null},"domain_userid")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"domainSessionId"),(0,i.kt)("td",{parentName:"tr",align:null},"sid"),(0,i.kt)("td",{parentName:"tr",align:null},"domain_sessionid")))),(0,i.kt)("p",null,"Note: the ability to set ",(0,i.kt)("inlineCode",{parentName:"p"},"domainSessionId")," was added in version 0.11."),(0,i.kt)("p",null,"These properties are especially useful for client-side tracking, or for linking client-side and server-side tracking. We highly recommend tracking in both client-side and server-side, if it's relevant to your application. Read more about this in these ",(0,i.kt)("a",{parentName:"p",href:"https://snowplowanalytics.com/blog/2019/02/05/how-server-side-tracking-fills-holes-in-your-data-and-improves-your-analytics/"},"blog")," ",(0,i.kt)("a",{parentName:"p",href:"https://snowplowanalytics.com/blog/2021/11/09/the-unrivaled-power-of-joining-client-and-server-side-tracking/"},"posts"),"."),(0,i.kt)("p",null,"If you are also using the Javascript tracker, it will set ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/javascript-trackers/browser-tracker/cookies-and-local-storage/"},"cookies")," in the browser. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," properties ",(0,i.kt)("inlineCode",{parentName:"p"},"domainUserId"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"domainSessionId")," are intended to be used for extracted cookie values passed to the Java tracker. If you want to track other identification tokens, we recommend creating schemas and using context entities."),(0,i.kt)("p",null,"As always, be aware of privacy when tracking ",(0,i.kt)("a",{parentName:"p",href:"https://snowplowanalytics.com/blog/2020/09/06/user-identification-and-privacy/"},"personal identifiable information")," such as email addresses or IP addresses."),(0,i.kt)("h3",{id:"overriding-autogenerated-event-properties"},"Overriding autogenerated event properties"),(0,i.kt)("p",null,"All enriched Snowplow events contain values for ",(0,i.kt)("inlineCode",{parentName:"p"},"user_ipaddress"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useragent"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"network_userid"),". "),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"user_ipaddress")," is automatically added to all enriched events. To manually override this, use a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," and set a ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddress")," string; use an empty string to prevent IP address tracking. Alternatively, use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/enriching-your-data/available-enrichments/ip-anonymization-enrichment/"},"IP anonymization enrichment"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useragent")," is also automatically added during enrichment. Snowplow pipelines provide multiple useragent-parsing ",(0,i.kt)("a",{parentName:"p",href:"/docs/enriching-your-data/available-enrichments/"},"enrichments"),". To manually override the detected useragent, use a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," and set a ",(0,i.kt)("inlineCode",{parentName:"p"},"useragent")," string. For the default Tracker configuration with OkHttp, the default ",(0,i.kt)("inlineCode",{parentName:"p"},"useragent"),' will be "okhttp/4.2.2".'),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"network_userid")," is the cookie value for the event collector\u2019s third-party cookie. It is the server-side user identifier. The cookie is named ",(0,i.kt)("inlineCode",{parentName:"p"},"sp")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"micro")," for Snowplow Micro pipelines). The default behaviour is for the collector to provide a new cookie/",(0,i.kt)("inlineCode",{parentName:"p"},"network_userid")," for each event it receives. To override the collector cookie\u2019s value with your own generated ID, use a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," object and set ",(0,i.kt)("inlineCode",{parentName:"p"},"networkUserId"),". Alternatively, configure a ",(0,i.kt)("inlineCode",{parentName:"p"},"CookieJar")," to persist the ",(0,i.kt)("inlineCode",{parentName:"p"},"sp")," cookie, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"network_userid"),", across requests (see ",(0,i.kt)("a",{parentName:"p",href:"/docs/collecting-data/collecting-from-own-applications/java-tracker/configuring-how-events-are-sent/#persisting-cookies-using-a-cookiejar"},"here"),")."),(0,i.kt)("p",null,"A further property, ",(0,i.kt)("inlineCode",{parentName:"p"},"timezone"),", is generated automatically during ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," initialization, based on ",(0,i.kt)("inlineCode",{parentName:"p"},"Calendar.getInstance().getTimeZone()"),". Therefore, this will be added to all events with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," attached. The default will be overriden if ",(0,i.kt)("inlineCode",{parentName:"p"},"timezone")," is provided explicitly. "),(0,i.kt)("h3",{id:"adding-subject-properties-to-events"},"Adding ",(0,i.kt)("inlineCode",{parentName:"h3"},"Subject")," properties to events"),(0,i.kt)("p",null,"There are two ways to track the ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject"),' "atomic" properties in your events: on an event-by-event basis; or globally, to affect all events. A combination of both methods is also possible.'),(0,i.kt)("p",null,"A simple ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," initialisation looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'SubjectConfiguration subjectConfig = new SubjectConfiguration()\n        .userId("java@snowplowanalytics.com");\nSubject subject = new Subject(subjectConfig);\n')),(0,i.kt)("p",null,"In this case only the ",(0,i.kt)("inlineCode",{parentName:"p"},"userId")," (and ",(0,i.kt)("inlineCode",{parentName:"p"},"timezone"),") were set. There are no required properties for the ",(0,i.kt)("inlineCode",{parentName:"p"},"SubjectConfiguration"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," can be added to any event using the ",(0,i.kt)("inlineCode",{parentName:"p"},"subject()")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Event.Builder")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// This example shows an SelfDescribing event, but all events can have a Subject\nSelfDescribing selfDescribing = SelfDescribing.builder()\n            .eventData(dataAsSelfDescribingJson)\n            .subject(subject)\n            .build();\n")),(0,i.kt)("p",null,"To set ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," properties in all subsequent events, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},"Tracker")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// A Subject can be provided at Tracker initialisation\n// Indirectly, using the Snowplow interface and a SubjectConfiguration object\nSubjectConfiguration subjectConfig = new SubjectConfiguration().useragent("useragent");\nTracker tracker = Snowplow.createTracker(\n        new TrackerConfiguration("trackerNamespace", "appId"),\n        new NetworkConfiguration("http://collector-url"),\n        subjectConfig);\n\n// Creating a Tracker directly using Subject and Emitter objects\nSubject subject = new Subject();\nBatchEmitter emitter = new BatchEmitter(new NetworkConfiguration("http://endpoint"));\nTracker tracker = new Tracker(new TrackerConfiguration("trackerNamespace", "appId"), emitter, subject);\n\n// Alternatively, a Subject can be set later\nTracker tracker = Snowplow.createTracker("trackerNamespace", "appId", "http://collectorEndpoint");\nSubject subject = new Subject();\ntracker.setSubject(subject);\n')),(0,i.kt)("p",null,"Subject properties can be updated or added to after initialization, using setter methods. See the ",(0,i.kt)("a",{parentName:"p",href:"https://snowplow.github.io/snowplow-java-tracker/index.html?com/snowplowanalytics/snowplow/tracker/Subject.html"},"API docs")," for full details."),(0,i.kt)("p",null,"It's possible to use both ",(0,i.kt)("inlineCode",{parentName:"p"},"Event"),"-specific and ",(0,i.kt)("inlineCode",{parentName:"p"},"Tracker"),"-associated ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," objects simultaneously. Fields from both ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," objects are added to the payload, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Event"),"-specific ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," having priority."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Adding a global, Tracker-associated Subject\nSubjectConfiguration trackerSubjectConfig = new SubjectConfiguration()\n        .language("EN")\n        .useragent("Snowplow");\n\nTracker tracker = Snowplow.createTracker(\n        new TrackerConfiguration("trackerNamespace", "appId"),\n        new NetworkConfiguration("http://collector-url"),\n        trackerSubjectConfig);\n\n// Adding an Event-specific Subject\nSubjectConfiguration eventSubjectConfig = new SubjectConfiguration()\n        .userId("java@snowplowanalytics.com")\n        .useragent("Mozilla/5.0");\n\nSelfDescribing selfDescribing = SelfDescribing.builder()\n        .eventData(dataAsSelfDescribingJson)\n        .subject(new Subject(eventSubjectConfig))\n        .build();\n\n// Tracking the event\ntracker.track(selfDescribing);\n')),(0,i.kt)("p",null,"The resulting enriched event would have these ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject"),' atomic columns populated:\n| Column in enriched event | Value / example value                       | Source         |\n|--------------------------|---------------------------------------------|----------------|\n| user_id                  | "',(0,i.kt)("a",{parentName:"p",href:"mailto:java@snowplowanalytics.com"},"java@snowplowanalytics.com"),'"                | eventSubject   |\n| os_timezone              | e.g. "Europe/London"                        | eventSubject   |\n| br_lang                  | "EN"                                        | trackerSubject |\n| useragent                | "Mozilla/5.0"                               | eventSubject   |\n| network_userid           | e.g. "8383057f-2769-4321-ad72-58fa1b22e4b3" | pipeline       |'))}d.isMDXComponent=!0}}]);